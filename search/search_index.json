{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Polars + Bloomberg Open API polars-bloomberg is a Python library that extracts Bloomberg\u2019s financial data directly into Polars DataFrames. If you\u2019re a quant financial analyst, data scientist, or quant developer working in capital markets, this library makes it easy to fetch, transform, and analyze Bloomberg data right in Polars\u2014offering speed, efficient memory usage, and a lot of fun to use! Why use polars-bloomberg? User-Friendly Functions: Shortcuts like bdp() , bdh() , and bql() (inspired by Excel-like Bloomberg calls) let you pull data with minimal boilerplate. High-Performance Analytics: Polars is a lightning-fast DataFrame library. Combined with Bloomberg\u2019s rich dataset, you get efficient data retrieval and minimal memory footprint No Pandas Dependency: Enjoy a clean integration that relies solely on Polars for speed and simplicity. Introduction Working with Bloomberg data in Python often feels more complicated than using their well-known Excel interface. Great projects like blp , xbbg , and pdblp have made this easier by pulling data directly into pandas. With polars-bloomberg, you can enjoy the speed and simplicity of Polars DataFrames\u2014accessing both familiar Excel-style calls ( bdp , bdh ) and advanced bql queries\u2014without extra pandas conversions. I hope you enjoy using it as much as I had fun building it! Prerequisites Info Bloomberg Access: A valid Bloomberg terminal license is required! Bloomberg Python API: The blpapi library must be installed. See the Bloomberg API Library . Python Version: Python 3.12+ recommended. Installation pip install polars-bloomberg Quick Start \"Hello World\" Example (under 1 minute): from polars_bloomberg import BQuery # Fetch the latest price for Apple (AAPL US Equity) with BQuery() as bq: df = bq.bdp([\"AAPL US Equity\"], [\"PX_LAST\"]) print(df) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 security \u2506 PX_LAST \u2502 \u2502 --- \u2506 --- \u2502 \u2502 str \u2506 f64 \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 AAPL US Equity \u2506 248.13 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 What this does: - Establishes a Bloomberg connection using the context manager. - Retrieves the last price of Apple shares. - Returns the result as a Polars DataFrame. If you see a price in df , your setup is working \ud83e\udd29!!! Core Methods BQuery is your main interface. Using a context manager ensures the connection opens and closes cleanly. Within this session, you can use: - bq.bdp() for Bloomberg Data Points (single-value fields). - bq.bdh() for Historical Data (time series). - bq.bql() for complex Bloomberg Query Language requests. BDP Use Case: Fetch the latest single-value data points (like last price, currency, or descriptive fields). Example: Fetching the Last Price & Currency of Apple and SEB with BQuery() as bq: df = bq.bdp([\"AAPL US Equity\", \"SEBA SS Equity\"], [\"PX_LAST\", \"CRNCY\"]) print(df) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 security \u2506 PX_LAST \u2506 CRNCY \u2502 \u2502 --- \u2506 --- \u2506 --- \u2502 \u2502 str \u2506 f64 \u2506 str \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 AAPL US Equity \u2506 248.13 \u2506 USD \u2502 \u2502 SEBA SS Equity \u2506 155.2 \u2506 SEK \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 BDP with different column types polars-bloomberg correctly infers column type as shown in this example: with BQuery() as bq: df = bq.bdp([\"XS2930103580 Corp\", \"USX60003AC87 Corp\"], [\"SECURITY_DES\", \"YAS_ZSPREAD\", \"CRNCY\", \"NXT_CALL_DT\"]) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 security \u2506 SECURITY_DES \u2506 YAS_ZSPREAD \u2506 CRNCY \u2506 NXT_CALL_DT \u2502 \u2502 --- \u2506 --- \u2506 --- \u2506 --- \u2506 --- \u2502 \u2502 str \u2506 str \u2506 f64 \u2506 str \u2506 date \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 XS2930103580 Corp \u2506 SEB 6 3/4 PERP \u2506 304.676112 \u2506 USD \u2506 2031-11-04 \u2502 \u2502 USX60003AC87 Corp \u2506 NDAFH 6.3 PERP \u2506 292.477506 \u2506 USD \u2506 2031-09-25 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 BDP with overrides User can submit list of tuples with overrides with BQuery() as bq: df = bq.bdp( [\"IBM US Equity\"], [\"PX_LAST\", \"CRNCY_ADJ_PX_LAST\"], overrides=[(\"EQY_FUND_CRNCY\", \"SEK\")], ) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 security \u2506 PX_LAST \u2506 CRNCY_ADJ_PX_LAST \u2502 \u2502 --- \u2506 --- \u2506 --- \u2502 \u2502 str \u2506 f64 \u2506 f64 \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 IBM US Equity \u2506 230.82 \u2506 2535.174 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 BDP with date overrides Overrides for dates has to be in format YYYYMMDD with BQuery() as bq: df = bq.bdp([\"USX60003AC87 Corp\"], [\"SETTLE_DT\"], overrides=[(\"USER_LOCAL_TRADE_DATE\", \"20241014\")]) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 security \u2506 SETTLE_DT \u2502 \u2502 --- \u2506 --- \u2502 \u2502 str \u2506 date \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 USX60003AC87 Corp \u2506 2024-10-15 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 with BQuery() as bq: df = bq.bdp(['USDSEK Curncy', 'SEKCZK Curncy'], ['SETTLE_DT', 'PX_LAST'], overrides=[('REFERENCE_DATE', '20200715')] ) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 security \u2506 SETTLE_DT \u2506 PX_LAST \u2502 \u2502 --- \u2506 --- \u2506 --- \u2502 \u2502 str \u2506 date \u2506 f64 \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 USDSEK Curncy \u2506 2020-07-17 \u2506 10.9778 \u2502 \u2502 SEKCZK Curncy \u2506 2020-07-17 \u2506 2.1698 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 BDH Use Case: Retrieve historical data over a date range, such as daily closing prices or volumes. with BQuery() as bq: df = bq.bdh( [\"TLT US Equity\"], [\"PX_LAST\"], start_date=date(2019, 1, 1), end_date=date(2019, 1, 7), ) print(df) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 security \u2506 date \u2506 PX_LAST \u2502 \u2502 --- \u2506 --- \u2506 --- \u2502 \u2502 str \u2506 date \u2506 f64 \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 TLT US Equity \u2506 2019-01-02 \u2506 122.15 \u2502 \u2502 TLT US Equity \u2506 2019-01-03 \u2506 123.54 \u2502 \u2502 TLT US Equity \u2506 2019-01-04 \u2506 122.11 \u2502 \u2502 TLT US Equity \u2506 2019-01-07 \u2506 121.75 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 BDH with multiple securities / fields with BQuery() as bq: df = bq.bdh( securities=[\"SPY US Equity\", \"TLT US Equity\"], fields=[\"PX_LAST\", \"VOLUME\"], start_date=date(2019, 1, 1), end_date=date(2019, 1, 10), options={\"adjustmentSplit\": True}, ) print(df) shape: (14, 4) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 security \u2506 date \u2506 PX_LAST \u2506 VOLUME \u2502 \u2502 --- \u2506 --- \u2506 --- \u2506 --- \u2502 \u2502 str \u2506 date \u2506 f64 \u2506 f64 \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 SPY US Equity \u2506 2019-01-02 \u2506 250.18 \u2506 1.26925199e8 \u2502 \u2502 SPY US Equity \u2506 2019-01-03 \u2506 244.21 \u2506 1.44140692e8 \u2502 \u2502 SPY US Equity \u2506 2019-01-04 \u2506 252.39 \u2506 1.42628834e8 \u2502 \u2502 SPY US Equity \u2506 2019-01-07 \u2506 254.38 \u2506 1.031391e8 \u2502 \u2502 SPY US Equity \u2506 2019-01-08 \u2506 256.77 \u2506 1.02512587e8 \u2502 \u2502 \u2026 \u2506 \u2026 \u2506 \u2026 \u2506 \u2026 \u2502 \u2502 TLT US Equity \u2506 2019-01-04 \u2506 122.11 \u2506 1.2970226e7 \u2502 \u2502 TLT US Equity \u2506 2019-01-07 \u2506 121.75 \u2506 8.498104e6 \u2502 \u2502 TLT US Equity \u2506 2019-01-08 \u2506 121.43 \u2506 7.737103e6 \u2502 \u2502 TLT US Equity \u2506 2019-01-09 \u2506 121.24 \u2506 9.349245e6 \u2502 \u2502 TLT US Equity \u2506 2019-01-10 \u2506 120.46 \u2506 8.22286e6 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 BDH with options - periodicitySelection: Monthly with BQuery() as bq: df = bq.bdh(['AAPL US Equity'], ['PX_LAST'], start_date=date(2019, 1, 1), end_date=date(2019, 3, 29), options={\"periodicitySelection\": \"MONTHLY\"}) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 security \u2506 date \u2506 PX_LAST \u2502 \u2502 --- \u2506 --- \u2506 --- \u2502 \u2502 str \u2506 date \u2506 f64 \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 AAPL US Equity \u2506 2019-01-31 \u2506 41.61 \u2502 \u2502 AAPL US Equity \u2506 2019-02-28 \u2506 43.288 \u2502 \u2502 AAPL US Equity \u2506 2019-03-29 \u2506 47.488 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 BQL Use Case : Run more advanced queries to screen securities, calculate analytics (like moving averages), or pull fundamental data with complex conditions. Returns : The bql() method returns a BqlResult object, which: - Acts like a list of Polars DataFrames (one for each item in BQL get statement). - Provides a .combine() method to merge DataFrames on common columns. 1. Basic Example: Single Item and Single Security # Fetch the last price of IBM stock with BQuery() as bq: results = bq.bql(\"get(px_last) for(['IBM US Equity'])\") print(results[0]) # Access the first DataFrame Output: \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 ID \u2506 px_last \u2506 DATE \u2506 CURRENCY \u2502 \u2502 --- \u2506 --- \u2506 --- \u2506 --- \u2502 \u2502 str \u2506 f64 \u2506 date \u2506 str \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 IBM US Equity \u2506 230.82 \u2506 2024-12-14 \u2506 USD \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 2. Multiple Securities with a Single Item # Fetch the last price for IBM and SEB with BQuery() as bq: results = bq.bql(\"get(px_last) for(['IBM US Equity', 'SEBA SS Equity'])\") print(results[0]) Output: \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 ID \u2506 px_last \u2506 DATE \u2506 CURRENCY \u2502 \u2502 --- \u2506 --- \u2506 --- \u2506 --- \u2502 \u2502 str \u2506 f64 \u2506 date \u2506 str \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 IBM US Equity \u2506 230.82 \u2506 2024-12-14 \u2506 USD \u2502 \u2502 SEBA SS Equity \u2506 155.2 \u2506 2024-12-14 \u2506 SEK \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 3. Multiple Items When querying for multiple items, bql() returns a list of DataFrames # Fetch name and last price of IBM (two items) with BQuery() as bq: results = bq.bql(\"get(name, px_last) for(['IBM US Equity'])\") Output: >>> print(len(results)) # 2 DataFrames n=2 >>> print(results[0]) # First DataFrame: 'name' \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 ID \u2506 name \u2502 \u2502 --- \u2506 --- \u2502 \u2502 str \u2506 str \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 IBM US Equity \u2506 International Business Machine \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 >>> print(results[1]) # Second DataFrame: 'px_last' \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 ID \u2506 px_last \u2506 DATE \u2506 CURRENCY \u2502 \u2502 --- \u2506 --- \u2506 --- \u2506 --- \u2502 \u2502 str \u2506 f64 \u2506 date \u2506 str \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 IBM US Equity \u2506 230.82 \u2506 2024-12-14 \u2506 USD \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Combining Results >>> combined_df = results.combine() >>> print(combined_df) Output: \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 ID \u2506 name \u2506 px_last \u2506 DATE \u2506 CURRENCY \u2502 \u2502 --- \u2506 --- \u2506 --- \u2506 --- \u2506 --- \u2502 \u2502 str \u2506 str \u2506 f64 \u2506 date \u2506 str \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 IBM US Equity \u2506 International Business Machine \u2506 230.82 \u2506 2024-12-14 \u2506 USD \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 4. Advanced Example: Screening Securities Find list of SEB and Handelsbanken's AT1 bonds and print their names, duration and Z-Spread. query=\"\"\" let(#dur=duration(duration_type=MODIFIED); #zsprd=spread(spread_type=Z);) get(name(), #dur, #zsprd) for(filter(screenresults(type=SRCH, screen_name='@COCO'), ticker in ['SEB', 'SHBASS'])) \"\"\" with BQuery() as bq: results = bq.bql(query) combined_df = results.combine() print(combined_df) Output: \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 ID \u2506 name() \u2506 #dur \u2506 DATE \u2506 #zsprd \u2502 \u2502 --- \u2506 --- \u2506 --- \u2506 --- \u2506 --- \u2502 \u2502 str \u2506 str \u2506 f64 \u2506 date \u2506 f64 \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 BW924993 Corp \u2506 SEB 6 \u215e PERP \u2506 2.23 \u2506 2024-12-16 \u2506 212.0 \u2502 \u2502 YV402592 Corp \u2506 SEB Float PERP \u2506 0.21 \u2506 2024-12-16 \u2506 233.0 \u2502 \u2502 ZQ349286 Corp \u2506 SEB 5 \u215b PERP \u2506 0.39 \u2506 2024-12-16 \u2506 186.0 \u2502 \u2502 ZO703315 Corp \u2506 SHBASS 4 \u215c PERP \u2506 1.95 \u2506 2024-12-16 \u2506 213.0 \u2502 \u2502 ZO703956 Corp \u2506 SHBASS 4 \u00be PERP \u2506 4.94 \u2506 2024-12-16 \u2506 256.0 \u2502 \u2502 YU819930 Corp \u2506 SEB 6 \u00be PERP \u2506 5.37 \u2506 2024-12-16 \u2506 309.0 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Average PE per Sector This example shows aggregation (average) per group (sector) for members of an index. The resulting list has only one element since there is only one data-item in get query = \"\"\" let(#avg_pe=avg(group(pe_ratio(), gics_sector_name()));) get(#avg_pe) for(members('OMX Index')) \"\"\" with BQuery() as bq: results = bq.bql(query) print(results[0].head(5)) Output: \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 ID \u2506 #avg_pe \u2506 REVISION_DAT \u2506 AS_OF_DATE \u2506 PERIOD_END_D \u2506 ORIG_IDS \u2506 GICS_SECTOR \u2502 \u2502 --- \u2506 --- \u2506 E \u2506 --- \u2506 ATE \u2506 --- \u2506 _NAME() \u2502 \u2502 str \u2506 f64 \u2506 --- \u2506 date \u2506 --- \u2506 str \u2506 --- \u2502 \u2502 \u2506 \u2506 date \u2506 \u2506 date \u2506 \u2506 str \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 Communicatio \u2506 19.561754 \u2506 2024-10-24 \u2506 2024-12-14 \u2506 2024-09-30 \u2506 null \u2506 Communicati \u2502 \u2502 n Services \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 on Services \u2502 \u2502 Consumer Dis \u2506 19.117295 \u2506 2024-10-24 \u2506 2024-12-14 \u2506 2024-09-30 \u2506 null \u2506 Consumer \u2502 \u2502 cretionary \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 Discretiona \u2502 \u2502 \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 ry \u2502 \u2502 Consumer \u2506 15.984743 \u2506 2024-10-24 \u2506 2024-12-14 \u2506 2024-09-30 \u2506 ESSITYB SS \u2506 Consumer \u2502 \u2502 Staples \u2506 \u2506 \u2506 \u2506 \u2506 Equity \u2506 Staples \u2502 \u2502 Financials \u2506 6.815895 \u2506 2024-10-24 \u2506 2024-12-14 \u2506 2024-09-30 \u2506 null \u2506 Financials \u2502 \u2502 Health Care \u2506 22.00628 \u2506 2024-11-12 \u2506 2024-12-14 \u2506 2024-09-30 \u2506 null \u2506 Health Care \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Axes Get current axes of all Swedish USD AT1 bonds # Get current axes for Swedish AT1 bonds in USD query=\"\"\" let(#ax=axes();) get(security_des, #ax) for(filter(bondsuniv(ACTIVE), crncy()=='USD' and basel_iii_designation() == 'Additional Tier 1' and country_iso() == 'SE')) \"\"\" with BQuery() as bq: results = bq.bql(query) print(results.combine()) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 ID \u2506 security_des \u2506 #ax \u2506 ASK_DEPTH \u2506 BID_DEPTH \u2506 ASK_TOTAL_SIZE \u2506 BID_TOTAL_SIZE \u2502 \u2502 --- \u2506 --- \u2506 --- \u2506 --- \u2506 --- \u2506 --- \u2506 --- \u2502 \u2502 str \u2506 str \u2506 str \u2506 i64 \u2506 i64 \u2506 f64 \u2506 f64 \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 YU819930 Corp \u2506 SEB 6 \u00be PERP \u2506 Y \u2506 2 \u2506 null \u2506 5.6e6 \u2506 null \u2502 \u2502 ZO703315 Corp \u2506 SHBASS 4 \u215c PERP \u2506 Y \u2506 1 \u2506 2 \u2506 5e6 \u2506 6e6 \u2502 \u2502 BR069680 Corp \u2506 SWEDA 4 PERP \u2506 Y \u2506 null \u2506 1 \u2506 null \u2506 3e6 \u2502 \u2502 ZL122341 Corp \u2506 SWEDA 7 \u215d PERP \u2506 Y \u2506 null \u2506 6 \u2506 null \u2506 2.04e7 \u2502 \u2502 ZQ349286 Corp \u2506 SEB 5 \u215b PERP \u2506 Y \u2506 2 \u2506 4 \u2506 5.5e6 \u2506 3e7 \u2502 \u2502 ZF859199 Corp \u2506 SWEDA 7 \u00be PERP \u2506 Y \u2506 1 \u2506 1 \u2506 2e6 \u2506 2e6 \u2502 \u2502 ZO703956 Corp \u2506 SHBASS 4 \u00be PERP \u2506 Y \u2506 1 \u2506 3 \u2506 1.2e6 \u2506 1.1e7 \u2502 \u2502 BW924993 Corp \u2506 SEB 6 \u215e PERP \u2506 Y \u2506 1 \u2506 3 \u2506 5e6 \u2506 1.1e7 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Axes with all columns # RT1 Axes with all columns query = \"\"\" let(#ax=axes();) get(name, #ax, amt_outstanding) for(filter(bondsuniv(ACTIVE), crncy() in ['USD', 'EUR'] and solvency_ii_designation() == 'Restricted Tier 1' and amt_outstanding() > 7.5e8 and is_axed('Bid') == True)) preferences(addcols=all) \"\"\" with BQuery() as bq: results = bq.bql(query) print(results.combine()) Output: shape: (3, 33) ID name #ax ASK_PRICE BID_PRICE ASK_DEPTH BID_DEPTH ASK_DEALER BID_DEALER ASK_SIZE BID_SIZE ASK_TOTAL_SIZE BID_TOTAL_SIZE ASK_PRICE_IS_DERIVED BID_PRICE_IS_DERIVED ASK_SPREAD BID_SPREAD ASK_SPREAD_IS_DERIVED BID_SPREAD_IS_DERIVED ASK_YIELD BID_YIELD ASK_YIELD_IS_DERIVED BID_YIELD_IS_DERIVED ASK_AXE_SOURCE BID_AXE_SOURCE ASK_BROKER BID_BROKER ASK_HIST_AGG_SIZE BID_HIST_AGG_SIZE amt_outstanding CURRENCY_OF_ISSUE MULTIPLIER CURRENCY str str str f64 f64 i64 i64 str str f64 f64 f64 f64 bool bool f64 f64 bool bool f64 f64 bool bool str str str str f64 f64 f64 str f64 str \"BM368057 Corp\" \"ALVGR 2 \u215d PERP\" \"Y\" 88.034 87.427 5 1 \"BARC\" \"IMI\" 1.2e6 1e6 7.2e6 1e6 null null 287.031 300.046 true true 4.854 4.976 true true \"ERUN\" \"ERUN\" \"BXOL\" \"IMIC\" 6.68e6 8.92e6 1.2500e9 \"EUR\" 1.0 \"EUR\" \"EK588238 Corp\" \"ASSGEN 4.596 PERP\" \"Y\" 101.0 100.13 4 6 \"MSAX\" \"A2A\" 500000.0 100000.0 1.556e7 3.83e7 null null 108.9 207.889 true true 3.466 4.434 null true \"ERUN\" \"BBX\" \"MSAX\" \"A2A\" 1.70424e7 3.17e7 1.0004e9 \"EUR\" 1.0 \"EUR\" \"BR244025 Corp\" \"ALVGR 3.2 PERP\" \"Y\" 88.0 86.875 3 4 \"UBS\" \"DB\" 5e6 1e6 1.1e7 1.4e7 null null 49.33 414.602 true true 7.34258 8.553 null true \"ERUN\" \"ERUN\" \"UBSW\" \"DABC\" 1.6876e6 3.6e7 1.2500e9 \"USD\" 1.0 \"USD\" Segments The following example shows handling of two data-items with different length. The first dataframe describes the segments (and has length 5 in this case), while the second dataframe contains time series. One can join the dataframes on common columns and pivot the segments into columns as shown below: # revenue per segment query = \"\"\" let(#segment=segment_name(); #revenue=sales_Rev_turn(fpt=q, fpr=range(2023Q3, 2024Q3)); ) get(#segment, #revenue) for(segments('GTN US Equity',type=reported,hierarchy=PRODUCT, level=1)) \"\"\" with BQuery() as bq: results = bq.bql(query) df = results.combine().pivot( index=\"PERIOD_END_DATE\", on=\"#segment\", values=\"#revenue\" ) print(df) Output: \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 PERIOD_END_DATE \u2506 Broadcasting \u2506 Production Companies \u2506 Other \u2506 Adjustment \u2502 \u2502 --- \u2506 --- \u2506 --- \u2506 --- \u2506 --- \u2502 \u2502 date \u2506 f64 \u2506 f64 \u2506 f64 \u2506 f64 \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 2023-09-30 \u2506 7.83e8 \u2506 2e7 \u2506 1.6e7 \u2506 null \u2502 \u2502 2023-12-31 \u2506 8.13e8 \u2506 3.2e7 \u2506 1.9e7 \u2506 null \u2502 \u2502 2024-03-31 \u2506 7.8e8 \u2506 2.4e7 \u2506 1.9e7 \u2506 null \u2502 \u2502 2024-06-30 \u2506 8.08e8 \u2506 1.8e7 \u2506 0.0 \u2506 null \u2502 \u2502 2024-09-30 \u2506 9.24e8 \u2506 2.6e7 \u2506 1.7e7 \u2506 null \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Actual and Forward EPS Estimates with BQuery() as bq: results = bq.bql(\"\"\" let(#eps=is_eps(fa_period_type='A', fa_period_offset=range(-4,2));) get(#eps) for(['IBM US Equity']) \"\"\") print(results[0]) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 ID \u2506 #eps \u2506 REVISION_DATE \u2506 AS_OF_DATE \u2506 PERIOD_END_DATE \u2506 CURRENCY \u2502 \u2502 --- \u2506 --- \u2506 --- \u2506 --- \u2506 --- \u2506 --- \u2502 \u2502 str \u2506 f64 \u2506 date \u2506 date \u2506 date \u2506 str \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 IBM US Equity \u2506 10.63 \u2506 2022-02-22 \u2506 2024-12-14 \u2506 2019-12-31 \u2506 USD \u2502 \u2502 IBM US Equity \u2506 6.28 \u2506 2023-02-28 \u2506 2024-12-14 \u2506 2020-12-31 \u2506 USD \u2502 \u2502 IBM US Equity \u2506 6.41 \u2506 2023-02-28 \u2506 2024-12-14 \u2506 2021-12-31 \u2506 USD \u2502 \u2502 IBM US Equity \u2506 1.82 \u2506 2024-03-18 \u2506 2024-12-14 \u2506 2022-12-31 \u2506 USD \u2502 \u2502 IBM US Equity \u2506 8.23 \u2506 2024-03-18 \u2506 2024-12-14 \u2506 2023-12-31 \u2506 USD \u2502 \u2502 IBM US Equity \u2506 7.891 \u2506 2024-12-13 \u2506 2024-12-14 \u2506 2024-12-31 \u2506 USD \u2502 \u2502 IBM US Equity \u2506 9.236 \u2506 2024-12-13 \u2506 2024-12-14 \u2506 2025-12-31 \u2506 USD \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Average issuer OAS spread per maturity bucket # Example: Average OAS-spread per maturity bucket query = \"\"\" let( #bins = bins(maturity_years, [3,9,18,30], ['(1) 0-3','(2) 3-9','(3) 9-18','(4) 18-30','(5) 30+']); #average_spread = avg(group(spread(st=oas),#bins)); ) get(#average_spread) for(filter(bonds('NVDA US Equity', issuedby = 'ENTITY'), maturity_years != NA)) \"\"\" with BQuery() as bq: results = bq.bql(query) print(results[0]) Output: \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 ID \u2506 #average_spread \u2506 DATE \u2506 ORIG_IDS \u2506 #BINS \u2502 \u2502 --- \u2506 --- \u2506 --- \u2506 --- \u2506 --- \u2502 \u2502 str \u2506 f64 \u2506 date \u2506 str \u2506 str \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 (1) 0-3 \u2506 31.195689 \u2506 2024-12-14 \u2506 QZ552396 Corp \u2506 (1) 0-3 \u2502 \u2502 (2) 3-9 \u2506 59.580383 \u2506 2024-12-14 \u2506 null \u2506 (2) 3-9 \u2502 \u2502 (3) 9-18 \u2506 110.614416 \u2506 2024-12-14 \u2506 BH393780 Corp \u2506 (3) 9-18 \u2502 \u2502 (4) 18-30 \u2506 135.160279 \u2506 2024-12-14 \u2506 BH393781 Corp \u2506 (4) 18-30 \u2502 \u2502 (5) 30+ \u2506 150.713405 \u2506 2024-12-14 \u2506 BH393782 Corp \u2506 (5) 30+ \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Technical Analysis: stocks with 20d EMA > 200d EMA and RSI > 53 with BQuery() as bq: results = bq.bql( \"\"\" let(#ema20=emavg(period=20); #ema200=emavg(period=200); #rsi=rsi(close=px_last());) get(name(), #ema20, #ema200, #rsi) for(filter(members('OMX Index'), and(#ema20 > #ema200, #rsi > 53))) with(fill=PREV) \"\"\" ) print(results.combine()) Output: \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 ID \u2506 name() \u2506 #ema20 \u2506 DATE \u2506 CURRENCY \u2506 #ema200 \u2506 #rsi \u2502 \u2502 --- \u2506 --- \u2506 --- \u2506 --- \u2506 --- \u2506 --- \u2506 --- \u2502 \u2502 str \u2506 str \u2506 f64 \u2506 date \u2506 str \u2506 f64 \u2506 f64 \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 ERICB SS Equity \u2506 Telefonaktiebola \u2506 90.152604 \u2506 2024-12-16 \u2506 SEK \u2506 75.072151 \u2506 56.010028 \u2502 \u2502 \u2506 get LM Ericsso \u2506 \u2506 \u2506 \u2506 \u2506 \u2502 \u2502 ABB SS Equity \u2506 ABB Ltd \u2506 630.622469 \u2506 2024-12-16 \u2506 SEK \u2506 566.571183 \u2506 53.763102 \u2502 \u2502 SEBA SS Equity \u2506 Skandinaviska \u2506 153.80595 \u2506 2024-12-16 \u2506 SEK \u2506 150.742394 \u2506 56.460733 \u2502 \u2502 \u2506 Enskilda Banken \u2506 \u2506 \u2506 \u2506 \u2506 \u2502 \u2502 ASSAB SS Equity \u2506 Assa Abloy AB \u2506 339.017591 \u2506 2024-12-16 \u2506 SEK \u2506 317.057573 \u2506 53.351619 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Bond Universe from Equity Ticker # Get Bond Universe from Equity Ticker query = \"\"\" let(#rank=normalized_payment_rank(); #oas=spread(st=oas); #nxt_call=nxt_call_dt(); ) get(name(), #rank, #nxt_call, #oas) for(filter(bonds('GTN US Equity'), series() == '144A')) \"\"\" with BQuery() as bq: results = bq.bql(query) df = results.combine() print(df) Output: \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 ID \u2506 name() \u2506 #rank \u2506 #nxt_call \u2506 #oas \u2506 DATE \u2502 \u2502 --- \u2506 --- \u2506 --- \u2506 --- \u2506 --- \u2506 --- \u2502 \u2502 str \u2506 str \u2506 str \u2506 date \u2506 f64 \u2506 date \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 YX231113 Corp \u2506 GTN 10 \u00bd 07/15/29 \u2506 1st Lien Secured \u2506 2026-07-15 \u2506 598.66491 \u2506 2024-12-17 \u2502 \u2502 BS116983 Corp \u2506 GTN 5 \u215c 11/15/31 \u2506 Sr Unsecured \u2506 2026-11-15 \u2506 1193.17529 \u2506 2024-12-17 \u2502 \u2502 AV438089 Corp \u2506 GTN 7 05/15/27 \u2506 Sr Unsecured \u2506 2024-12-24 \u2506 400.340456 \u2506 2024-12-17 \u2502 \u2502 ZO860846 Corp \u2506 GTN 4 \u00be 10/15/30 \u2506 Sr Unsecured \u2506 2025-10-15 \u2506 1249.34346 \u2506 2024-12-17 \u2502 \u2502 LW375188 Corp \u2506 GTN 5 \u215e 07/15/26 \u2506 Sr Unsecured \u2506 2025-01-13 \u2506 173.761744 \u2506 2024-12-17 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Bonds Total Returns This is example of a single-item query returning total return for all GTN bonds in a long dataframe. We can easily pivot it into wide format, as in the example below # Total Return of GTN Bonds query = \"\"\" let(#rng = range(-1M, 0D); #rets = return_series(calc_interval=#rng,per=W);) get(#rets) for(filter(bonds('GTN US Equity'), series() == '144A')) \"\"\" with BQuery() as bq: results = bq.bql(query) df = results[0].pivot(on=\"ID\", index=\"DATE\", values=\"#rets\") print(df) Output: shape: (6, 6) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 DATE \u2506 YX231113 Corp \u2506 BS116983 Corp \u2506 AV438089 Corp \u2506 ZO860846 Corp \u2506 LW375188 Corp \u2502 \u2502 --- \u2506 --- \u2506 --- \u2506 --- \u2506 --- \u2506 --- \u2502 \u2502 date \u2506 f64 \u2506 f64 \u2506 f64 \u2506 f64 \u2506 f64 \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 2024-11-17 \u2506 null \u2506 null \u2506 null \u2506 null \u2506 null \u2502 \u2502 2024-11-24 \u2506 0.001653 \u2506 0.051179 \u2506 0.020363 \u2506 0.001371 \u2506 -0.002939 \u2502 \u2502 2024-12-01 \u2506 0.002837 \u2506 0.010405 \u2506 -0.001466 \u2506 0.007275 \u2506 0.000581 \u2502 \u2502 2024-12-08 \u2506 -0.000041 \u2506 0.016145 \u2506 0.000766 \u2506 0.024984 \u2506 0.000936 \u2502 \u2502 2024-12-15 \u2506 0.001495 \u2506 -0.047 \u2506 -0.000233 \u2506 -0.043509 \u2506 0.002241 \u2502 \u2502 2024-12-17 \u2506 0.00008 \u2506 -0.000004 \u2506 -0.0035 \u2506 -0.007937 \u2506 0.000064 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Maturity Wall for US HY Bonds query = \"\"\" let(#mv=sum(group(amt_outstanding(currency=USD), by=[year(maturity()), industry_sector()]));) get(#mv) for(members('LF98TRUU Index')) \"\"\" with BQuery() as bq: results = bq.bql(query) df = results.combine().rename( {\"YEAR(MATURITY())\": \"maturity\", \"INDUSTRY_SECTOR()\": \"sector\", \"#mv\": \"mv\"} ) print(df.pivot(index=\"maturity\", on=\"sector\", values=\"mv\").head()) Output: shape: (5, 11) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 maturity \u2506 Basic \u2506 Consumer, \u2506 Energy \u2506 \u2026 \u2506 Financial \u2506 Technolog \u2506 Utilities \u2506 Diversifi \u2502 \u2502 --- \u2506 Materials \u2506 Non-cycli \u2506 --- \u2506 \u2506 --- \u2506 y \u2506 --- \u2506 ed \u2502 \u2502 i64 \u2506 --- \u2506 cal \u2506 f64 \u2506 \u2506 f64 \u2506 --- \u2506 f64 \u2506 --- \u2502 \u2502 \u2506 f64 \u2506 --- \u2506 \u2506 \u2506 \u2506 f64 \u2506 \u2506 f64 \u2502 \u2502 \u2506 \u2506 f64 \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 2025 \u2506 1.5e8 \u2506 5.34916e8 \u2506 5e8 \u2506 \u2026 \u2506 null \u2506 null \u2506 null \u2506 null \u2502 \u2502 2026 \u2506 4.4013e9 \u2506 9.3293e9 \u2506 8.2931e9 \u2506 \u2026 \u2506 1.3524e10 \u2506 4.0608e9 \u2506 2.5202e9 \u2506 null \u2502 \u2502 2027 \u2506 8.3921e9 \u2506 2.3409e10 \u2506 1.2427e10 \u2506 \u2026 \u2506 1.9430e10 \u2506 4.3367e9 \u2506 3.6620e9 \u2506 null \u2502 \u2502 2028 \u2506 1.4701e10 \u2506 3.7457e10 \u2506 2.2442e10 \u2506 \u2026 \u2506 2.3341e10 \u2506 9.9143e9 \u2506 7.6388e9 \u2506 5e8 \u2502 \u2502 2029 \u2506 1.6512e10 \u2506 5.7381e10 \u2506 3.9286e10 \u2506 \u2026 \u2506 4.2337e10 \u2506 2.2660e10 \u2506 5.8558e9 \u2506 null \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Additional Documentation & Resources API Documentation : Detailed documentation and function references are available in API Documentation Additional Examples : Check out examples/ for hands-on notebooks demonstrating a variety of use cases. BQL examples and use cases: examples/Examples-BQL.ipynb Bloomberg Developer Resources : For more details on the Bloomberg API itself, visit the Bloomberg Developer's page .","title":"Home"},{"location":"#polars-bloomberg-open-api","text":"polars-bloomberg is a Python library that extracts Bloomberg\u2019s financial data directly into Polars DataFrames. If you\u2019re a quant financial analyst, data scientist, or quant developer working in capital markets, this library makes it easy to fetch, transform, and analyze Bloomberg data right in Polars\u2014offering speed, efficient memory usage, and a lot of fun to use! Why use polars-bloomberg? User-Friendly Functions: Shortcuts like bdp() , bdh() , and bql() (inspired by Excel-like Bloomberg calls) let you pull data with minimal boilerplate. High-Performance Analytics: Polars is a lightning-fast DataFrame library. Combined with Bloomberg\u2019s rich dataset, you get efficient data retrieval and minimal memory footprint No Pandas Dependency: Enjoy a clean integration that relies solely on Polars for speed and simplicity.","title":"Polars + Bloomberg Open API"},{"location":"#introduction","text":"Working with Bloomberg data in Python often feels more complicated than using their well-known Excel interface. Great projects like blp , xbbg , and pdblp have made this easier by pulling data directly into pandas. With polars-bloomberg, you can enjoy the speed and simplicity of Polars DataFrames\u2014accessing both familiar Excel-style calls ( bdp , bdh ) and advanced bql queries\u2014without extra pandas conversions. I hope you enjoy using it as much as I had fun building it!","title":"Introduction"},{"location":"#prerequisites","text":"Info Bloomberg Access: A valid Bloomberg terminal license is required! Bloomberg Python API: The blpapi library must be installed. See the Bloomberg API Library . Python Version: Python 3.12+ recommended.","title":"Prerequisites"},{"location":"#installation","text":"pip install polars-bloomberg","title":"Installation"},{"location":"#quick-start","text":"\"Hello World\" Example (under 1 minute): from polars_bloomberg import BQuery # Fetch the latest price for Apple (AAPL US Equity) with BQuery() as bq: df = bq.bdp([\"AAPL US Equity\"], [\"PX_LAST\"]) print(df) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 security \u2506 PX_LAST \u2502 \u2502 --- \u2506 --- \u2502 \u2502 str \u2506 f64 \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 AAPL US Equity \u2506 248.13 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 What this does: - Establishes a Bloomberg connection using the context manager. - Retrieves the last price of Apple shares. - Returns the result as a Polars DataFrame. If you see a price in df , your setup is working \ud83e\udd29!!!","title":"Quick Start"},{"location":"#core-methods","text":"BQuery is your main interface. Using a context manager ensures the connection opens and closes cleanly. Within this session, you can use: - bq.bdp() for Bloomberg Data Points (single-value fields). - bq.bdh() for Historical Data (time series). - bq.bql() for complex Bloomberg Query Language requests.","title":"Core Methods"},{"location":"#bdp","text":"Use Case: Fetch the latest single-value data points (like last price, currency, or descriptive fields).","title":"BDP"},{"location":"#example-fetching-the-last-price-currency-of-apple-and-seb","text":"with BQuery() as bq: df = bq.bdp([\"AAPL US Equity\", \"SEBA SS Equity\"], [\"PX_LAST\", \"CRNCY\"]) print(df) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 security \u2506 PX_LAST \u2506 CRNCY \u2502 \u2502 --- \u2506 --- \u2506 --- \u2502 \u2502 str \u2506 f64 \u2506 str \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 AAPL US Equity \u2506 248.13 \u2506 USD \u2502 \u2502 SEBA SS Equity \u2506 155.2 \u2506 SEK \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518","title":"Example: Fetching the Last Price &amp; Currency of Apple and SEB"},{"location":"#bdp-with-different-column-types","text":"polars-bloomberg correctly infers column type as shown in this example: with BQuery() as bq: df = bq.bdp([\"XS2930103580 Corp\", \"USX60003AC87 Corp\"], [\"SECURITY_DES\", \"YAS_ZSPREAD\", \"CRNCY\", \"NXT_CALL_DT\"]) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 security \u2506 SECURITY_DES \u2506 YAS_ZSPREAD \u2506 CRNCY \u2506 NXT_CALL_DT \u2502 \u2502 --- \u2506 --- \u2506 --- \u2506 --- \u2506 --- \u2502 \u2502 str \u2506 str \u2506 f64 \u2506 str \u2506 date \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 XS2930103580 Corp \u2506 SEB 6 3/4 PERP \u2506 304.676112 \u2506 USD \u2506 2031-11-04 \u2502 \u2502 USX60003AC87 Corp \u2506 NDAFH 6.3 PERP \u2506 292.477506 \u2506 USD \u2506 2031-09-25 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518","title":"BDP with different column types"},{"location":"#bdp-with-overrides","text":"User can submit list of tuples with overrides with BQuery() as bq: df = bq.bdp( [\"IBM US Equity\"], [\"PX_LAST\", \"CRNCY_ADJ_PX_LAST\"], overrides=[(\"EQY_FUND_CRNCY\", \"SEK\")], ) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 security \u2506 PX_LAST \u2506 CRNCY_ADJ_PX_LAST \u2502 \u2502 --- \u2506 --- \u2506 --- \u2502 \u2502 str \u2506 f64 \u2506 f64 \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 IBM US Equity \u2506 230.82 \u2506 2535.174 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518","title":"BDP with overrides"},{"location":"#bdp-with-date-overrides","text":"Overrides for dates has to be in format YYYYMMDD with BQuery() as bq: df = bq.bdp([\"USX60003AC87 Corp\"], [\"SETTLE_DT\"], overrides=[(\"USER_LOCAL_TRADE_DATE\", \"20241014\")]) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 security \u2506 SETTLE_DT \u2502 \u2502 --- \u2506 --- \u2502 \u2502 str \u2506 date \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 USX60003AC87 Corp \u2506 2024-10-15 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 with BQuery() as bq: df = bq.bdp(['USDSEK Curncy', 'SEKCZK Curncy'], ['SETTLE_DT', 'PX_LAST'], overrides=[('REFERENCE_DATE', '20200715')] ) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 security \u2506 SETTLE_DT \u2506 PX_LAST \u2502 \u2502 --- \u2506 --- \u2506 --- \u2502 \u2502 str \u2506 date \u2506 f64 \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 USDSEK Curncy \u2506 2020-07-17 \u2506 10.9778 \u2502 \u2502 SEKCZK Curncy \u2506 2020-07-17 \u2506 2.1698 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518","title":"BDP with date overrides"},{"location":"#bdh","text":"Use Case: Retrieve historical data over a date range, such as daily closing prices or volumes. with BQuery() as bq: df = bq.bdh( [\"TLT US Equity\"], [\"PX_LAST\"], start_date=date(2019, 1, 1), end_date=date(2019, 1, 7), ) print(df) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 security \u2506 date \u2506 PX_LAST \u2502 \u2502 --- \u2506 --- \u2506 --- \u2502 \u2502 str \u2506 date \u2506 f64 \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 TLT US Equity \u2506 2019-01-02 \u2506 122.15 \u2502 \u2502 TLT US Equity \u2506 2019-01-03 \u2506 123.54 \u2502 \u2502 TLT US Equity \u2506 2019-01-04 \u2506 122.11 \u2502 \u2502 TLT US Equity \u2506 2019-01-07 \u2506 121.75 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518","title":"BDH"},{"location":"#bdh-with-multiple-securities-fields","text":"with BQuery() as bq: df = bq.bdh( securities=[\"SPY US Equity\", \"TLT US Equity\"], fields=[\"PX_LAST\", \"VOLUME\"], start_date=date(2019, 1, 1), end_date=date(2019, 1, 10), options={\"adjustmentSplit\": True}, ) print(df) shape: (14, 4) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 security \u2506 date \u2506 PX_LAST \u2506 VOLUME \u2502 \u2502 --- \u2506 --- \u2506 --- \u2506 --- \u2502 \u2502 str \u2506 date \u2506 f64 \u2506 f64 \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 SPY US Equity \u2506 2019-01-02 \u2506 250.18 \u2506 1.26925199e8 \u2502 \u2502 SPY US Equity \u2506 2019-01-03 \u2506 244.21 \u2506 1.44140692e8 \u2502 \u2502 SPY US Equity \u2506 2019-01-04 \u2506 252.39 \u2506 1.42628834e8 \u2502 \u2502 SPY US Equity \u2506 2019-01-07 \u2506 254.38 \u2506 1.031391e8 \u2502 \u2502 SPY US Equity \u2506 2019-01-08 \u2506 256.77 \u2506 1.02512587e8 \u2502 \u2502 \u2026 \u2506 \u2026 \u2506 \u2026 \u2506 \u2026 \u2502 \u2502 TLT US Equity \u2506 2019-01-04 \u2506 122.11 \u2506 1.2970226e7 \u2502 \u2502 TLT US Equity \u2506 2019-01-07 \u2506 121.75 \u2506 8.498104e6 \u2502 \u2502 TLT US Equity \u2506 2019-01-08 \u2506 121.43 \u2506 7.737103e6 \u2502 \u2502 TLT US Equity \u2506 2019-01-09 \u2506 121.24 \u2506 9.349245e6 \u2502 \u2502 TLT US Equity \u2506 2019-01-10 \u2506 120.46 \u2506 8.22286e6 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518","title":"BDH with multiple securities / fields"},{"location":"#bdh-with-options-periodicityselection-monthly","text":"with BQuery() as bq: df = bq.bdh(['AAPL US Equity'], ['PX_LAST'], start_date=date(2019, 1, 1), end_date=date(2019, 3, 29), options={\"periodicitySelection\": \"MONTHLY\"}) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 security \u2506 date \u2506 PX_LAST \u2502 \u2502 --- \u2506 --- \u2506 --- \u2502 \u2502 str \u2506 date \u2506 f64 \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 AAPL US Equity \u2506 2019-01-31 \u2506 41.61 \u2502 \u2502 AAPL US Equity \u2506 2019-02-28 \u2506 43.288 \u2502 \u2502 AAPL US Equity \u2506 2019-03-29 \u2506 47.488 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518","title":"BDH with options - periodicitySelection: Monthly"},{"location":"#bql","text":"Use Case : Run more advanced queries to screen securities, calculate analytics (like moving averages), or pull fundamental data with complex conditions. Returns : The bql() method returns a BqlResult object, which: - Acts like a list of Polars DataFrames (one for each item in BQL get statement). - Provides a .combine() method to merge DataFrames on common columns.","title":"BQL"},{"location":"#1-basic-example-single-item-and-single-security","text":"# Fetch the last price of IBM stock with BQuery() as bq: results = bq.bql(\"get(px_last) for(['IBM US Equity'])\") print(results[0]) # Access the first DataFrame Output: \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 ID \u2506 px_last \u2506 DATE \u2506 CURRENCY \u2502 \u2502 --- \u2506 --- \u2506 --- \u2506 --- \u2502 \u2502 str \u2506 f64 \u2506 date \u2506 str \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 IBM US Equity \u2506 230.82 \u2506 2024-12-14 \u2506 USD \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518","title":"1. Basic Example: Single Item and Single Security"},{"location":"#2-multiple-securities-with-a-single-item","text":"# Fetch the last price for IBM and SEB with BQuery() as bq: results = bq.bql(\"get(px_last) for(['IBM US Equity', 'SEBA SS Equity'])\") print(results[0]) Output: \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 ID \u2506 px_last \u2506 DATE \u2506 CURRENCY \u2502 \u2502 --- \u2506 --- \u2506 --- \u2506 --- \u2502 \u2502 str \u2506 f64 \u2506 date \u2506 str \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 IBM US Equity \u2506 230.82 \u2506 2024-12-14 \u2506 USD \u2502 \u2502 SEBA SS Equity \u2506 155.2 \u2506 2024-12-14 \u2506 SEK \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518","title":"2. Multiple Securities with a Single Item"},{"location":"#3-multiple-items","text":"When querying for multiple items, bql() returns a list of DataFrames # Fetch name and last price of IBM (two items) with BQuery() as bq: results = bq.bql(\"get(name, px_last) for(['IBM US Equity'])\") Output: >>> print(len(results)) # 2 DataFrames n=2 >>> print(results[0]) # First DataFrame: 'name' \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 ID \u2506 name \u2502 \u2502 --- \u2506 --- \u2502 \u2502 str \u2506 str \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 IBM US Equity \u2506 International Business Machine \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 >>> print(results[1]) # Second DataFrame: 'px_last' \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 ID \u2506 px_last \u2506 DATE \u2506 CURRENCY \u2502 \u2502 --- \u2506 --- \u2506 --- \u2506 --- \u2502 \u2502 str \u2506 f64 \u2506 date \u2506 str \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 IBM US Equity \u2506 230.82 \u2506 2024-12-14 \u2506 USD \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518","title":"3. Multiple Items"},{"location":"#combining-results","text":">>> combined_df = results.combine() >>> print(combined_df) Output: \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 ID \u2506 name \u2506 px_last \u2506 DATE \u2506 CURRENCY \u2502 \u2502 --- \u2506 --- \u2506 --- \u2506 --- \u2506 --- \u2502 \u2502 str \u2506 str \u2506 f64 \u2506 date \u2506 str \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 IBM US Equity \u2506 International Business Machine \u2506 230.82 \u2506 2024-12-14 \u2506 USD \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518","title":"Combining Results"},{"location":"#4-advanced-example-screening-securities","text":"Find list of SEB and Handelsbanken's AT1 bonds and print their names, duration and Z-Spread. query=\"\"\" let(#dur=duration(duration_type=MODIFIED); #zsprd=spread(spread_type=Z);) get(name(), #dur, #zsprd) for(filter(screenresults(type=SRCH, screen_name='@COCO'), ticker in ['SEB', 'SHBASS'])) \"\"\" with BQuery() as bq: results = bq.bql(query) combined_df = results.combine() print(combined_df) Output: \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 ID \u2506 name() \u2506 #dur \u2506 DATE \u2506 #zsprd \u2502 \u2502 --- \u2506 --- \u2506 --- \u2506 --- \u2506 --- \u2502 \u2502 str \u2506 str \u2506 f64 \u2506 date \u2506 f64 \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 BW924993 Corp \u2506 SEB 6 \u215e PERP \u2506 2.23 \u2506 2024-12-16 \u2506 212.0 \u2502 \u2502 YV402592 Corp \u2506 SEB Float PERP \u2506 0.21 \u2506 2024-12-16 \u2506 233.0 \u2502 \u2502 ZQ349286 Corp \u2506 SEB 5 \u215b PERP \u2506 0.39 \u2506 2024-12-16 \u2506 186.0 \u2502 \u2502 ZO703315 Corp \u2506 SHBASS 4 \u215c PERP \u2506 1.95 \u2506 2024-12-16 \u2506 213.0 \u2502 \u2502 ZO703956 Corp \u2506 SHBASS 4 \u00be PERP \u2506 4.94 \u2506 2024-12-16 \u2506 256.0 \u2502 \u2502 YU819930 Corp \u2506 SEB 6 \u00be PERP \u2506 5.37 \u2506 2024-12-16 \u2506 309.0 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518","title":"4. Advanced Example: Screening Securities"},{"location":"#average-pe-per-sector","text":"This example shows aggregation (average) per group (sector) for members of an index. The resulting list has only one element since there is only one data-item in get query = \"\"\" let(#avg_pe=avg(group(pe_ratio(), gics_sector_name()));) get(#avg_pe) for(members('OMX Index')) \"\"\" with BQuery() as bq: results = bq.bql(query) print(results[0].head(5)) Output: \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 ID \u2506 #avg_pe \u2506 REVISION_DAT \u2506 AS_OF_DATE \u2506 PERIOD_END_D \u2506 ORIG_IDS \u2506 GICS_SECTOR \u2502 \u2502 --- \u2506 --- \u2506 E \u2506 --- \u2506 ATE \u2506 --- \u2506 _NAME() \u2502 \u2502 str \u2506 f64 \u2506 --- \u2506 date \u2506 --- \u2506 str \u2506 --- \u2502 \u2502 \u2506 \u2506 date \u2506 \u2506 date \u2506 \u2506 str \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 Communicatio \u2506 19.561754 \u2506 2024-10-24 \u2506 2024-12-14 \u2506 2024-09-30 \u2506 null \u2506 Communicati \u2502 \u2502 n Services \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 on Services \u2502 \u2502 Consumer Dis \u2506 19.117295 \u2506 2024-10-24 \u2506 2024-12-14 \u2506 2024-09-30 \u2506 null \u2506 Consumer \u2502 \u2502 cretionary \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 Discretiona \u2502 \u2502 \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 ry \u2502 \u2502 Consumer \u2506 15.984743 \u2506 2024-10-24 \u2506 2024-12-14 \u2506 2024-09-30 \u2506 ESSITYB SS \u2506 Consumer \u2502 \u2502 Staples \u2506 \u2506 \u2506 \u2506 \u2506 Equity \u2506 Staples \u2502 \u2502 Financials \u2506 6.815895 \u2506 2024-10-24 \u2506 2024-12-14 \u2506 2024-09-30 \u2506 null \u2506 Financials \u2502 \u2502 Health Care \u2506 22.00628 \u2506 2024-11-12 \u2506 2024-12-14 \u2506 2024-09-30 \u2506 null \u2506 Health Care \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518","title":"Average PE per Sector"},{"location":"#axes","text":"Get current axes of all Swedish USD AT1 bonds # Get current axes for Swedish AT1 bonds in USD query=\"\"\" let(#ax=axes();) get(security_des, #ax) for(filter(bondsuniv(ACTIVE), crncy()=='USD' and basel_iii_designation() == 'Additional Tier 1' and country_iso() == 'SE')) \"\"\" with BQuery() as bq: results = bq.bql(query) print(results.combine()) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 ID \u2506 security_des \u2506 #ax \u2506 ASK_DEPTH \u2506 BID_DEPTH \u2506 ASK_TOTAL_SIZE \u2506 BID_TOTAL_SIZE \u2502 \u2502 --- \u2506 --- \u2506 --- \u2506 --- \u2506 --- \u2506 --- \u2506 --- \u2502 \u2502 str \u2506 str \u2506 str \u2506 i64 \u2506 i64 \u2506 f64 \u2506 f64 \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 YU819930 Corp \u2506 SEB 6 \u00be PERP \u2506 Y \u2506 2 \u2506 null \u2506 5.6e6 \u2506 null \u2502 \u2502 ZO703315 Corp \u2506 SHBASS 4 \u215c PERP \u2506 Y \u2506 1 \u2506 2 \u2506 5e6 \u2506 6e6 \u2502 \u2502 BR069680 Corp \u2506 SWEDA 4 PERP \u2506 Y \u2506 null \u2506 1 \u2506 null \u2506 3e6 \u2502 \u2502 ZL122341 Corp \u2506 SWEDA 7 \u215d PERP \u2506 Y \u2506 null \u2506 6 \u2506 null \u2506 2.04e7 \u2502 \u2502 ZQ349286 Corp \u2506 SEB 5 \u215b PERP \u2506 Y \u2506 2 \u2506 4 \u2506 5.5e6 \u2506 3e7 \u2502 \u2502 ZF859199 Corp \u2506 SWEDA 7 \u00be PERP \u2506 Y \u2506 1 \u2506 1 \u2506 2e6 \u2506 2e6 \u2502 \u2502 ZO703956 Corp \u2506 SHBASS 4 \u00be PERP \u2506 Y \u2506 1 \u2506 3 \u2506 1.2e6 \u2506 1.1e7 \u2502 \u2502 BW924993 Corp \u2506 SEB 6 \u215e PERP \u2506 Y \u2506 1 \u2506 3 \u2506 5e6 \u2506 1.1e7 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518","title":"Axes"},{"location":"#axes-with-all-columns","text":"# RT1 Axes with all columns query = \"\"\" let(#ax=axes();) get(name, #ax, amt_outstanding) for(filter(bondsuniv(ACTIVE), crncy() in ['USD', 'EUR'] and solvency_ii_designation() == 'Restricted Tier 1' and amt_outstanding() > 7.5e8 and is_axed('Bid') == True)) preferences(addcols=all) \"\"\" with BQuery() as bq: results = bq.bql(query) print(results.combine()) Output: shape: (3, 33) ID name #ax ASK_PRICE BID_PRICE ASK_DEPTH BID_DEPTH ASK_DEALER BID_DEALER ASK_SIZE BID_SIZE ASK_TOTAL_SIZE BID_TOTAL_SIZE ASK_PRICE_IS_DERIVED BID_PRICE_IS_DERIVED ASK_SPREAD BID_SPREAD ASK_SPREAD_IS_DERIVED BID_SPREAD_IS_DERIVED ASK_YIELD BID_YIELD ASK_YIELD_IS_DERIVED BID_YIELD_IS_DERIVED ASK_AXE_SOURCE BID_AXE_SOURCE ASK_BROKER BID_BROKER ASK_HIST_AGG_SIZE BID_HIST_AGG_SIZE amt_outstanding CURRENCY_OF_ISSUE MULTIPLIER CURRENCY str str str f64 f64 i64 i64 str str f64 f64 f64 f64 bool bool f64 f64 bool bool f64 f64 bool bool str str str str f64 f64 f64 str f64 str \"BM368057 Corp\" \"ALVGR 2 \u215d PERP\" \"Y\" 88.034 87.427 5 1 \"BARC\" \"IMI\" 1.2e6 1e6 7.2e6 1e6 null null 287.031 300.046 true true 4.854 4.976 true true \"ERUN\" \"ERUN\" \"BXOL\" \"IMIC\" 6.68e6 8.92e6 1.2500e9 \"EUR\" 1.0 \"EUR\" \"EK588238 Corp\" \"ASSGEN 4.596 PERP\" \"Y\" 101.0 100.13 4 6 \"MSAX\" \"A2A\" 500000.0 100000.0 1.556e7 3.83e7 null null 108.9 207.889 true true 3.466 4.434 null true \"ERUN\" \"BBX\" \"MSAX\" \"A2A\" 1.70424e7 3.17e7 1.0004e9 \"EUR\" 1.0 \"EUR\" \"BR244025 Corp\" \"ALVGR 3.2 PERP\" \"Y\" 88.0 86.875 3 4 \"UBS\" \"DB\" 5e6 1e6 1.1e7 1.4e7 null null 49.33 414.602 true true 7.34258 8.553 null true \"ERUN\" \"ERUN\" \"UBSW\" \"DABC\" 1.6876e6 3.6e7 1.2500e9 \"USD\" 1.0 \"USD\"","title":"Axes with all columns"},{"location":"#segments","text":"The following example shows handling of two data-items with different length. The first dataframe describes the segments (and has length 5 in this case), while the second dataframe contains time series. One can join the dataframes on common columns and pivot the segments into columns as shown below: # revenue per segment query = \"\"\" let(#segment=segment_name(); #revenue=sales_Rev_turn(fpt=q, fpr=range(2023Q3, 2024Q3)); ) get(#segment, #revenue) for(segments('GTN US Equity',type=reported,hierarchy=PRODUCT, level=1)) \"\"\" with BQuery() as bq: results = bq.bql(query) df = results.combine().pivot( index=\"PERIOD_END_DATE\", on=\"#segment\", values=\"#revenue\" ) print(df) Output: \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 PERIOD_END_DATE \u2506 Broadcasting \u2506 Production Companies \u2506 Other \u2506 Adjustment \u2502 \u2502 --- \u2506 --- \u2506 --- \u2506 --- \u2506 --- \u2502 \u2502 date \u2506 f64 \u2506 f64 \u2506 f64 \u2506 f64 \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 2023-09-30 \u2506 7.83e8 \u2506 2e7 \u2506 1.6e7 \u2506 null \u2502 \u2502 2023-12-31 \u2506 8.13e8 \u2506 3.2e7 \u2506 1.9e7 \u2506 null \u2502 \u2502 2024-03-31 \u2506 7.8e8 \u2506 2.4e7 \u2506 1.9e7 \u2506 null \u2502 \u2502 2024-06-30 \u2506 8.08e8 \u2506 1.8e7 \u2506 0.0 \u2506 null \u2502 \u2502 2024-09-30 \u2506 9.24e8 \u2506 2.6e7 \u2506 1.7e7 \u2506 null \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518","title":"Segments"},{"location":"#actual-and-forward-eps-estimates","text":"with BQuery() as bq: results = bq.bql(\"\"\" let(#eps=is_eps(fa_period_type='A', fa_period_offset=range(-4,2));) get(#eps) for(['IBM US Equity']) \"\"\") print(results[0]) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 ID \u2506 #eps \u2506 REVISION_DATE \u2506 AS_OF_DATE \u2506 PERIOD_END_DATE \u2506 CURRENCY \u2502 \u2502 --- \u2506 --- \u2506 --- \u2506 --- \u2506 --- \u2506 --- \u2502 \u2502 str \u2506 f64 \u2506 date \u2506 date \u2506 date \u2506 str \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 IBM US Equity \u2506 10.63 \u2506 2022-02-22 \u2506 2024-12-14 \u2506 2019-12-31 \u2506 USD \u2502 \u2502 IBM US Equity \u2506 6.28 \u2506 2023-02-28 \u2506 2024-12-14 \u2506 2020-12-31 \u2506 USD \u2502 \u2502 IBM US Equity \u2506 6.41 \u2506 2023-02-28 \u2506 2024-12-14 \u2506 2021-12-31 \u2506 USD \u2502 \u2502 IBM US Equity \u2506 1.82 \u2506 2024-03-18 \u2506 2024-12-14 \u2506 2022-12-31 \u2506 USD \u2502 \u2502 IBM US Equity \u2506 8.23 \u2506 2024-03-18 \u2506 2024-12-14 \u2506 2023-12-31 \u2506 USD \u2502 \u2502 IBM US Equity \u2506 7.891 \u2506 2024-12-13 \u2506 2024-12-14 \u2506 2024-12-31 \u2506 USD \u2502 \u2502 IBM US Equity \u2506 9.236 \u2506 2024-12-13 \u2506 2024-12-14 \u2506 2025-12-31 \u2506 USD \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518","title":"Actual and Forward EPS Estimates"},{"location":"#average-issuer-oas-spread-per-maturity-bucket","text":"# Example: Average OAS-spread per maturity bucket query = \"\"\" let( #bins = bins(maturity_years, [3,9,18,30], ['(1) 0-3','(2) 3-9','(3) 9-18','(4) 18-30','(5) 30+']); #average_spread = avg(group(spread(st=oas),#bins)); ) get(#average_spread) for(filter(bonds('NVDA US Equity', issuedby = 'ENTITY'), maturity_years != NA)) \"\"\" with BQuery() as bq: results = bq.bql(query) print(results[0]) Output: \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 ID \u2506 #average_spread \u2506 DATE \u2506 ORIG_IDS \u2506 #BINS \u2502 \u2502 --- \u2506 --- \u2506 --- \u2506 --- \u2506 --- \u2502 \u2502 str \u2506 f64 \u2506 date \u2506 str \u2506 str \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 (1) 0-3 \u2506 31.195689 \u2506 2024-12-14 \u2506 QZ552396 Corp \u2506 (1) 0-3 \u2502 \u2502 (2) 3-9 \u2506 59.580383 \u2506 2024-12-14 \u2506 null \u2506 (2) 3-9 \u2502 \u2502 (3) 9-18 \u2506 110.614416 \u2506 2024-12-14 \u2506 BH393780 Corp \u2506 (3) 9-18 \u2502 \u2502 (4) 18-30 \u2506 135.160279 \u2506 2024-12-14 \u2506 BH393781 Corp \u2506 (4) 18-30 \u2502 \u2502 (5) 30+ \u2506 150.713405 \u2506 2024-12-14 \u2506 BH393782 Corp \u2506 (5) 30+ \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518","title":"Average issuer OAS spread per maturity bucket"},{"location":"#technical-analysis-stocks-with-20d-ema-200d-ema-and-rsi-53","text":"with BQuery() as bq: results = bq.bql( \"\"\" let(#ema20=emavg(period=20); #ema200=emavg(period=200); #rsi=rsi(close=px_last());) get(name(), #ema20, #ema200, #rsi) for(filter(members('OMX Index'), and(#ema20 > #ema200, #rsi > 53))) with(fill=PREV) \"\"\" ) print(results.combine()) Output: \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 ID \u2506 name() \u2506 #ema20 \u2506 DATE \u2506 CURRENCY \u2506 #ema200 \u2506 #rsi \u2502 \u2502 --- \u2506 --- \u2506 --- \u2506 --- \u2506 --- \u2506 --- \u2506 --- \u2502 \u2502 str \u2506 str \u2506 f64 \u2506 date \u2506 str \u2506 f64 \u2506 f64 \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 ERICB SS Equity \u2506 Telefonaktiebola \u2506 90.152604 \u2506 2024-12-16 \u2506 SEK \u2506 75.072151 \u2506 56.010028 \u2502 \u2502 \u2506 get LM Ericsso \u2506 \u2506 \u2506 \u2506 \u2506 \u2502 \u2502 ABB SS Equity \u2506 ABB Ltd \u2506 630.622469 \u2506 2024-12-16 \u2506 SEK \u2506 566.571183 \u2506 53.763102 \u2502 \u2502 SEBA SS Equity \u2506 Skandinaviska \u2506 153.80595 \u2506 2024-12-16 \u2506 SEK \u2506 150.742394 \u2506 56.460733 \u2502 \u2502 \u2506 Enskilda Banken \u2506 \u2506 \u2506 \u2506 \u2506 \u2502 \u2502 ASSAB SS Equity \u2506 Assa Abloy AB \u2506 339.017591 \u2506 2024-12-16 \u2506 SEK \u2506 317.057573 \u2506 53.351619 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518","title":"Technical Analysis: stocks with 20d EMA &gt; 200d EMA and RSI &gt; 53"},{"location":"#bond-universe-from-equity-ticker","text":"# Get Bond Universe from Equity Ticker query = \"\"\" let(#rank=normalized_payment_rank(); #oas=spread(st=oas); #nxt_call=nxt_call_dt(); ) get(name(), #rank, #nxt_call, #oas) for(filter(bonds('GTN US Equity'), series() == '144A')) \"\"\" with BQuery() as bq: results = bq.bql(query) df = results.combine() print(df) Output: \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 ID \u2506 name() \u2506 #rank \u2506 #nxt_call \u2506 #oas \u2506 DATE \u2502 \u2502 --- \u2506 --- \u2506 --- \u2506 --- \u2506 --- \u2506 --- \u2502 \u2502 str \u2506 str \u2506 str \u2506 date \u2506 f64 \u2506 date \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 YX231113 Corp \u2506 GTN 10 \u00bd 07/15/29 \u2506 1st Lien Secured \u2506 2026-07-15 \u2506 598.66491 \u2506 2024-12-17 \u2502 \u2502 BS116983 Corp \u2506 GTN 5 \u215c 11/15/31 \u2506 Sr Unsecured \u2506 2026-11-15 \u2506 1193.17529 \u2506 2024-12-17 \u2502 \u2502 AV438089 Corp \u2506 GTN 7 05/15/27 \u2506 Sr Unsecured \u2506 2024-12-24 \u2506 400.340456 \u2506 2024-12-17 \u2502 \u2502 ZO860846 Corp \u2506 GTN 4 \u00be 10/15/30 \u2506 Sr Unsecured \u2506 2025-10-15 \u2506 1249.34346 \u2506 2024-12-17 \u2502 \u2502 LW375188 Corp \u2506 GTN 5 \u215e 07/15/26 \u2506 Sr Unsecured \u2506 2025-01-13 \u2506 173.761744 \u2506 2024-12-17 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518","title":"Bond Universe from Equity Ticker"},{"location":"#bonds-total-returns","text":"This is example of a single-item query returning total return for all GTN bonds in a long dataframe. We can easily pivot it into wide format, as in the example below # Total Return of GTN Bonds query = \"\"\" let(#rng = range(-1M, 0D); #rets = return_series(calc_interval=#rng,per=W);) get(#rets) for(filter(bonds('GTN US Equity'), series() == '144A')) \"\"\" with BQuery() as bq: results = bq.bql(query) df = results[0].pivot(on=\"ID\", index=\"DATE\", values=\"#rets\") print(df) Output: shape: (6, 6) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 DATE \u2506 YX231113 Corp \u2506 BS116983 Corp \u2506 AV438089 Corp \u2506 ZO860846 Corp \u2506 LW375188 Corp \u2502 \u2502 --- \u2506 --- \u2506 --- \u2506 --- \u2506 --- \u2506 --- \u2502 \u2502 date \u2506 f64 \u2506 f64 \u2506 f64 \u2506 f64 \u2506 f64 \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 2024-11-17 \u2506 null \u2506 null \u2506 null \u2506 null \u2506 null \u2502 \u2502 2024-11-24 \u2506 0.001653 \u2506 0.051179 \u2506 0.020363 \u2506 0.001371 \u2506 -0.002939 \u2502 \u2502 2024-12-01 \u2506 0.002837 \u2506 0.010405 \u2506 -0.001466 \u2506 0.007275 \u2506 0.000581 \u2502 \u2502 2024-12-08 \u2506 -0.000041 \u2506 0.016145 \u2506 0.000766 \u2506 0.024984 \u2506 0.000936 \u2502 \u2502 2024-12-15 \u2506 0.001495 \u2506 -0.047 \u2506 -0.000233 \u2506 -0.043509 \u2506 0.002241 \u2502 \u2502 2024-12-17 \u2506 0.00008 \u2506 -0.000004 \u2506 -0.0035 \u2506 -0.007937 \u2506 0.000064 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518","title":"Bonds Total Returns"},{"location":"#maturity-wall-for-us-hy-bonds","text":"query = \"\"\" let(#mv=sum(group(amt_outstanding(currency=USD), by=[year(maturity()), industry_sector()]));) get(#mv) for(members('LF98TRUU Index')) \"\"\" with BQuery() as bq: results = bq.bql(query) df = results.combine().rename( {\"YEAR(MATURITY())\": \"maturity\", \"INDUSTRY_SECTOR()\": \"sector\", \"#mv\": \"mv\"} ) print(df.pivot(index=\"maturity\", on=\"sector\", values=\"mv\").head()) Output: shape: (5, 11) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 maturity \u2506 Basic \u2506 Consumer, \u2506 Energy \u2506 \u2026 \u2506 Financial \u2506 Technolog \u2506 Utilities \u2506 Diversifi \u2502 \u2502 --- \u2506 Materials \u2506 Non-cycli \u2506 --- \u2506 \u2506 --- \u2506 y \u2506 --- \u2506 ed \u2502 \u2502 i64 \u2506 --- \u2506 cal \u2506 f64 \u2506 \u2506 f64 \u2506 --- \u2506 f64 \u2506 --- \u2502 \u2502 \u2506 f64 \u2506 --- \u2506 \u2506 \u2506 \u2506 f64 \u2506 \u2506 f64 \u2502 \u2502 \u2506 \u2506 f64 \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 2025 \u2506 1.5e8 \u2506 5.34916e8 \u2506 5e8 \u2506 \u2026 \u2506 null \u2506 null \u2506 null \u2506 null \u2502 \u2502 2026 \u2506 4.4013e9 \u2506 9.3293e9 \u2506 8.2931e9 \u2506 \u2026 \u2506 1.3524e10 \u2506 4.0608e9 \u2506 2.5202e9 \u2506 null \u2502 \u2502 2027 \u2506 8.3921e9 \u2506 2.3409e10 \u2506 1.2427e10 \u2506 \u2026 \u2506 1.9430e10 \u2506 4.3367e9 \u2506 3.6620e9 \u2506 null \u2502 \u2502 2028 \u2506 1.4701e10 \u2506 3.7457e10 \u2506 2.2442e10 \u2506 \u2026 \u2506 2.3341e10 \u2506 9.9143e9 \u2506 7.6388e9 \u2506 5e8 \u2502 \u2502 2029 \u2506 1.6512e10 \u2506 5.7381e10 \u2506 3.9286e10 \u2506 \u2026 \u2506 4.2337e10 \u2506 2.2660e10 \u2506 5.8558e9 \u2506 null \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518","title":"Maturity Wall for US HY Bonds"},{"location":"#additional-documentation-resources","text":"API Documentation : Detailed documentation and function references are available in API Documentation Additional Examples : Check out examples/ for hands-on notebooks demonstrating a variety of use cases. BQL examples and use cases: examples/Examples-BQL.ipynb Bloomberg Developer Resources : For more details on the Bloomberg API itself, visit the Bloomberg Developer's page .","title":"Additional Documentation &amp; Resources"},{"location":"api/","text":"API Reference polars_bloomberg.BQuery Provides methods to query Bloomberg API and return data as Polars DataFrames. Example Create a BQuery instance and fetch last price for Apple stock: from polars_bloomberg import BQuery with BQuery() as bq: df = bq.bdp(['AAPL US Equity'], ['PX_LAST']) print(df) Expected output: shape: (1, 2) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 security \u2506 PX_LAST \u2502 \u2502 --- \u2506 --- \u2502 \u2502 str \u2506 f64 \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 AAPL US Equity \u2506 171.32 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Source code in polars_bloomberg\\plbbg.py 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 class BQuery : \"\"\"Provides methods to query Bloomberg API and return data as Polars DataFrames. Example: Create a BQuery instance and fetch last price for Apple stock: ```python from polars_bloomberg import BQuery with BQuery() as bq: df = bq.bdp(['AAPL US Equity'], ['PX_LAST']) print(df) ``` Expected output: ```python shape: (1, 2) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 security \u2506 PX_LAST \u2502 \u2502 --- \u2506 --- \u2502 \u2502 str \u2506 f64 \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 AAPL US Equity \u2506 171.32 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 ``` \"\"\" def __init__ ( self , host : str = \"localhost\" , port : int = 8194 , timeout : int = 32_000 , debug : bool = False , ) -> None : \"\"\"Initialize a BQuery instance with connection parameters. Args: host (str, optional): The hostname for the Bloomberg API server. Defaults to \"localhost\". port (int, optional): The port number for the Bloomberg API server. Defaults to 8194. timeout (int, optional): Timeout in milliseconds for API requests. Defaults to 32000. debug (bool, optional): Enable debug logging/saving of intermediate results. Defaults to False. Raises: ConnectionError: If unable to establish connection to Bloomberg API. \"\"\" self . host = host self . port = port self . timeout = timeout self . session = None self . debug = debug def __enter__ ( self ): # noqa: D105 # Enter the runtime context related to this object. options = blpapi . SessionOptions () options . setServerHost ( self . host ) options . setServerPort ( self . port ) self . session = blpapi . Session ( options ) if not self . session . start (): raise ConnectionError ( \"Failed to start Bloomberg session.\" ) # Open both required services if not self . session . openService ( \"//blp/refdata\" ): raise ConnectionError ( \"Failed to open service //blp/refdata.\" ) if not self . session . openService ( \"//blp/bqlsvc\" ): raise ConnectionError ( \"Failed to open service //blp/bqlsvc.\" ) return self def __exit__ ( self , exc_type , exc_val , exc_tb ): # noqa: D105 # Exit the context manager and stop the Bloomberg session. if self . session : self . session . stop () def bdp ( self , securities : list [ str ], fields : list [ str ], overrides : list [ tuple ] | None = None , options : dict | None = None , ) -> pl . DataFrame : \"\"\"Bloomberg Data Point, equivalent to Excel BDP() function. Fetch reference data for given securities and fields. Args: securities (list[str]): List of security identifiers (e.g. 'AAPL US Equity'). fields (list[str]): List of data fields to retrieve (e.g., 'PX_LAST'). overrides (list[tuple], optional): List of tuples for field overrides. Defaults to None. options (dict, optional): Additional request options. Defaults to None. Returns: pl.DataFrame: A Polars DataFrame containing the requested reference data. Raises: ConnectionError: If there is an issue with the Bloomberg session. ValueError: If the request parameters are invalid. Example: Fetch last price for Apple and Microsoft stocks: ```python from polars_bloomberg import BQuery with BQuery() as bq: df = bq.bdp(['AAPL US Equity', 'MSFT US Equity'], ['PX_LAST']) print(df) ``` Expected output: ```python shape: (2, 2) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 security \u2506 PX_LAST \u2502 \u2502 --- \u2506 --- \u2502 \u2502 str \u2506 f64 \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 AAPL US Equity \u2506 171.32 \u2502 \u2502 MSFT US Equity \u2506 232.33 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 ``` \"\"\" # noqa: E501 request = self . _create_request ( \"ReferenceDataRequest\" , securities , fields , overrides , options ) responses = self . _send_request ( request ) data = self . _parse_bdp_responses ( responses , fields ) return pl . DataFrame ( data ) def bdh ( self , securities : list [ str ], fields : list [ str ], start_date : date , end_date : date , overrides : list [ tuple ] | None = None , options : dict | None = None , ) -> pl . DataFrame : \"\"\"Bloomberg Data History, equivalent to Excel BDH() function. Fetch historical data for given securities and fields between dates. Args: securities (list[str]): List of security identifiers (e.g., 'AAPL US Equity'). fields (list[str]): List of data fields to retrieve (e.g., 'PX_LAST'). start_date (date): Start date for the historical data. end_date (date): End date for the historical data. overrides (list[tuple], optional): List of tuples for field overrides. Defaults to None. options (dict, optional): Additional request options. Defaults to None. Returns: pl.DataFrame: A Polars DataFrame containing the requested historical data. Raises: ConnectionError: If there is an issue with the Bloomberg session. ValueError: If the request parameters are invalid. Example: Fetch historical closing prices for TLT: ```python from datetime import date from polars_bloomberg import BQuery with BQuery() as bq: df = bq.bdh( [\"TLT US Equity\"], [\"PX_LAST\"], start_date=date(2019, 1, 1), end_date=date(2019, 1, 7), ) print(df) ``` Expected output: ```python shape: (4, 3) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 security \u2506 date \u2506 PX_LAST \u2502 \u2502 --- \u2506 --- \u2506 --- \u2502 \u2502 str \u2506 date \u2506 f64 \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 TLT US Equity \u2506 2019-01-02 \u2506 122.15 \u2502 \u2502 TLT US Equity \u2506 2019-01-03 \u2506 123.54 \u2502 \u2502 TLT US Equity \u2506 2019-01-04 \u2506 122.11 \u2502 \u2502 TLT US Equity \u2506 2019-01-07 \u2506 121.75 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 ``` \"\"\" # noqa: E501 request = self . _create_request ( \"HistoricalDataRequest\" , securities , fields , overrides , options ) request . set ( \"startDate\" , start_date . strftime ( \"%Y%m %d \" )) request . set ( \"endDate\" , end_date . strftime ( \"%Y%m %d \" )) responses = self . _send_request ( request ) data = self . _parse_bdh_responses ( responses , fields ) return pl . DataFrame ( data ) def bql ( self , expression : str ) -> BqlResult : \"\"\"Execute a Bloomberg Query Language (BQL) query. BQL is Bloomberg's domain-specific language for complex financial queries. It allows for advanced data retrieval, screening, and analysis. Args: expression (str): The BQL query expression to execute. Can include functions like get(), let(), for(), filter(), etc. Returns: BqlResult: An object containing: - List of Polars DataFrames (one for each item in BQL get statement) - Helper methods like combine() to merge DataFrames on common columns Raises: ConnectionError: If there is an issue with the Bloomberg session. ValueError: If the BQL query syntax is invalid. Example: Simple query to fetch last price: ```python from polars_bloomberg import BQuery with BQuery() as bq: # Get last price for multiple securities result = bq.bql(\"get(px_last) for(['IBM US Equity', 'MSFT US Equity'])\") df = result.combine() print(df) ``` Expected output: ```python shape: (2, 4) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 ID \u2506 PX_LAST \u2502 \u2502 --- \u2506 --- \u2502 \u2502 str \u2506 f64 \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 AAPL US Equity\u2506 150.25 \u2502 \u2502 MSFT US Equity\u2506 250.80 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 ``` Access individual DataFrames: ```python >>> df_px_last = result[0] >>> print(df_px_last) shape: (2, 2) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 ID \u2506 PX_LAST \u2502 \u2502 --- \u2506 --- \u2502 \u2502 str \u2506 f64 \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 AAPL US Equity\u2506 150.25 \u2502 \u2502 MSFT US Equity\u2506 250.80 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 ``` Fetch multiple fields and combine results: ```python >>> result = bq.bql(\"get(px_last, px_volume) for('AAPL US Equity')\") >>> df_combined = result.combine() >>> print(df_combined) shape: (1, 3) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 ID \u2506 PX_LAST \u2506 PX_VOLUME \u2502 \u2502 --- \u2506 --- \u2506 --- \u2502 \u2502 str \u2506 f64 \u2506 f64 \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 AAPL US Equity\u2506 150.25 \u2506 30000000.0 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 ``` Iterate over individual DataFrames: ```python >>> for df in result: ... print(df) ``` \"\"\" # noqa: E501 request = self . _create_bql_request ( expression ) responses = self . _send_request ( request ) tables = self . _parse_bql_responses ( responses ) dataframes = [ pl . DataFrame ( table . data , schema = table . schema , strict = True ) for table in tables ] names = [ table . name for table in tables ] return BqlResult ( dataframes , names ) def _create_request ( self , request_type : str , securities : list [ str ], fields : list [ str ], overrides : Sequence | None = None , options : dict | None = None , ) -> blpapi . Request : \"\"\"Create a Bloomberg request with support for overrides and options.\"\"\" service = self . session . getService ( \"//blp/refdata\" ) request = service . createRequest ( request_type ) # Add securities securities_element = request . getElement ( \"securities\" ) for security in securities : securities_element . appendValue ( security ) # Add fields fields_element = request . getElement ( \"fields\" ) for field in fields : fields_element . appendValue ( field ) # Add overrides if provided if overrides : overrides_element = request . getElement ( \"overrides\" ) for field_id , value in overrides : override_element = overrides_element . appendElement () override_element . setElement ( \"fieldId\" , field_id ) override_element . setElement ( \"value\" , value ) # Add additional options if provided if options : for key , value in options . items (): request . set ( key , value ) return request def _create_bql_request ( self , expression : str ) -> blpapi . Request : \"\"\"Create a BQL request.\"\"\" service = self . session . getService ( \"//blp/bqlsvc\" ) request = service . createRequest ( \"sendQuery\" ) request . set ( \"expression\" , expression ) return request def _send_request ( self , request ) -> list [ dict ]: \"\"\"Send a Bloomberg request and collect responses with timeout handling.\"\"\" self . session . sendRequest ( request ) responses = [] while True : # Wait for an event with the specified timeout event = self . session . nextEvent ( self . timeout ) if event . eventType () == blpapi . Event . TIMEOUT : # Handle the timeout scenario raise TimeoutError ( f \"Request timed out after { self . timeout } milliseconds\" ) for msg in event : # Check for errors in the message if msg . hasElement ( \"responseError\" ): error = msg . getElement ( \"responseError\" ) error_message = error . getElementAsString ( \"message\" ) raise Exception ( f \"Response error: { error_message } \" ) responses . append ( msg . toPy ()) # Break the loop when the final response is received if event . eventType () == blpapi . Event . RESPONSE : break return responses def _parse_bdp_responses ( self , responses : list [ dict ], fields : list [ str ] ) -> list [ dict ]: data = [] for response in responses : security_data = response . get ( \"securityData\" , []) for sec in security_data : security = sec . get ( \"security\" ) field_data = sec . get ( \"fieldData\" , {}) record = { \"security\" : security } for field in fields : record [ field ] = field_data . get ( field ) data . append ( record ) return data def _parse_bdh_responses ( self , responses : list [ dict ], fields : list [ str ] ) -> list [ dict ]: data = [] for response in responses : security_data = response . get ( \"securityData\" , {}) security = security_data . get ( \"security\" ) field_data_array = security_data . get ( \"fieldData\" , []) for entry in field_data_array : record = { \"security\" : security , \"date\" : entry . get ( \"date\" )} for field in fields : record [ field ] = entry . get ( field ) data . append ( record ) return data def _parse_bql_responses ( self , responses : list [ Any ]): \"\"\"Parse BQL responses into a list of SITable objects.\"\"\" tables : list [ SITable ] = [] results : list [ dict ] = self . _extract_results ( responses ) for result in results : tables . extend ( self . _parse_result ( result )) return [ self . _apply_schema ( table ) for table in tables ] def _apply_schema ( self , table : SITable ) -> SITable : \"\"\"Convert data based on the schema (e.g., str -> date, 'NaN' -> None).\"\"\" date_format = \"%Y-%m- %d T%H:%M:%SZ\" for col , dtype in table . schema . items (): if dtype == pl . Date : table . data [ col ] = [ ( datetime . strptime ( v , date_format ) . date () if isinstance ( v , str ) else None ) for v in table . data [ col ] ] elif dtype in { pl . Float64 , pl . Int64 }: table . data [ col ] = [ None if x == \"NaN\" else x for x in table . data [ col ]] return table def _extract_results ( self , responses : list [ Any ]) -> list [ dict ]: \"\"\"Extract the 'results' section from each response, handling JSON strings.\"\"\" extracted = [] for response in responses : resp_dict = response if isinstance ( response , str ): try : resp_dict = json . loads ( response . replace ( \"'\" , '\"' )) except json . JSONDecodeError as e : logger . error ( \"Failed to decode JSON: %s . Error: %s \" , response , e ) continue results = resp_dict . get ( \"results\" ) if results : extracted . append ( results ) return extracted def _parse_result ( self , results : dict [ str , Any ]) -> list [ SITable ]: \"\"\"Convert a single BQL results dictionary into a list[SITable].\"\"\" tables : list [ SITable ] = [] for field , content in results . items (): data = {} schema_str = {} data [ \"ID\" ] = content . get ( \"idColumn\" , {}) . get ( \"values\" , []) data [ field ] = content . get ( \"valuesColumn\" , {}) . get ( \"values\" , []) schema_str [ \"ID\" ] = content . get ( \"idColumn\" , {}) . get ( \"type\" , \"STRING\" ) schema_str [ field ] = content . get ( \"valuesColumn\" , {}) . get ( \"type\" , \"STRING\" ) # Process secondary columns for sec_col in content . get ( \"secondaryColumns\" , []): name = sec_col . get ( \"name\" , \"\" ) data [ name ] = sec_col . get ( \"values\" , []) schema_str [ name ] = sec_col . get ( \"type\" , str ) schema = self . _map_types ( schema_str ) tables . append ( SITable ( name = field , data = data , schema = schema )) # If debug mode is on, save the input and output for reproducibility if self . debug : self . _save_debug_case ( results , tables ) return tables def _map_types ( self , type_map : dict [ str , str ]) -> dict [ str , pl . DataType ]: \"\"\"Map string-based types to Polars data types. Default to Utf8.\"\"\" mapping = { \"STRING\" : pl . Utf8 , \"DOUBLE\" : pl . Float64 , \"INT\" : pl . Int64 , \"DATE\" : pl . Date , \"BOOLEAN\" : pl . Boolean , } return { col : mapping . get ( t . upper (), pl . Utf8 ) for col , t in type_map . items ()} def _save_debug_case ( self , in_results : dict , tables : list [ SITable ]): \"\"\"Save input and output to a JSON file for debugging and test generation.\"\"\" # Create a directory for debug cases if it doesn't exist os . makedirs ( \"debug_cases\" , exist_ok = True ) # Create a unique filename with timestamp timestamp = datetime . now () . strftime ( \"%Y%m %d _%H%M%S\" ) filename = f \"debug_cases/bql_parse_results_ { timestamp } .json\" # Prepare serializable data out_tables = [] for t in tables : out_tables . append ( { \"name\" : t . name , \"data\" : t . data , \"schema\" : { col : str ( dtype ) for col , dtype in t . schema . items ()}, } ) to_save = { \"in_results\" : in_results , \"out_tables\" : out_tables } with open ( filename , \"w\" , encoding = \"utf-8\" ) as f : json . dump ( to_save , f , indent = 2 ) logger . debug ( \"Saved debug case to %s \" , filename ) __init__ ( host = 'localhost' , port = 8194 , timeout = 32000 , debug = False ) Initialize a BQuery instance with connection parameters. Parameters: host ( str , default: 'localhost' ) \u2013 The hostname for the Bloomberg API server. Defaults to \"localhost\". port ( int , default: 8194 ) \u2013 The port number for the Bloomberg API server. Defaults to 8194. timeout ( int , default: 32000 ) \u2013 Timeout in milliseconds for API requests. Defaults to 32000. debug ( bool , default: False ) \u2013 Enable debug logging/saving of intermediate results. Defaults to False. Raises: ConnectionError \u2013 If unable to establish connection to Bloomberg API. Source code in polars_bloomberg\\plbbg.py 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 def __init__ ( self , host : str = \"localhost\" , port : int = 8194 , timeout : int = 32_000 , debug : bool = False , ) -> None : \"\"\"Initialize a BQuery instance with connection parameters. Args: host (str, optional): The hostname for the Bloomberg API server. Defaults to \"localhost\". port (int, optional): The port number for the Bloomberg API server. Defaults to 8194. timeout (int, optional): Timeout in milliseconds for API requests. Defaults to 32000. debug (bool, optional): Enable debug logging/saving of intermediate results. Defaults to False. Raises: ConnectionError: If unable to establish connection to Bloomberg API. \"\"\" self . host = host self . port = port self . timeout = timeout self . session = None self . debug = debug bdh ( securities , fields , start_date , end_date , overrides = None , options = None ) Bloomberg Data History, equivalent to Excel BDH() function. Fetch historical data for given securities and fields between dates. Parameters: securities ( list [ str ] ) \u2013 List of security identifiers (e.g., 'AAPL US Equity'). fields ( list [ str ] ) \u2013 List of data fields to retrieve (e.g., 'PX_LAST'). start_date ( date ) \u2013 Start date for the historical data. end_date ( date ) \u2013 End date for the historical data. overrides ( list [ tuple ] , default: None ) \u2013 List of tuples for field overrides. Defaults to None. options ( dict , default: None ) \u2013 Additional request options. Defaults to None. Returns: DataFrame \u2013 pl.DataFrame: A Polars DataFrame containing the requested historical data. Raises: ConnectionError \u2013 If there is an issue with the Bloomberg session. ValueError \u2013 If the request parameters are invalid. Example Fetch historical closing prices for TLT: from datetime import date from polars_bloomberg import BQuery with BQuery() as bq: df = bq.bdh( [\"TLT US Equity\"], [\"PX_LAST\"], start_date=date(2019, 1, 1), end_date=date(2019, 1, 7), ) print(df) Expected output: shape: (4, 3) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 security \u2506 date \u2506 PX_LAST \u2502 \u2502 --- \u2506 --- \u2506 --- \u2502 \u2502 str \u2506 date \u2506 f64 \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 TLT US Equity \u2506 2019-01-02 \u2506 122.15 \u2502 \u2502 TLT US Equity \u2506 2019-01-03 \u2506 123.54 \u2502 \u2502 TLT US Equity \u2506 2019-01-04 \u2506 122.11 \u2502 \u2502 TLT US Equity \u2506 2019-01-07 \u2506 121.75 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Source code in polars_bloomberg\\plbbg.py 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 def bdh ( self , securities : list [ str ], fields : list [ str ], start_date : date , end_date : date , overrides : list [ tuple ] | None = None , options : dict | None = None , ) -> pl . DataFrame : \"\"\"Bloomberg Data History, equivalent to Excel BDH() function. Fetch historical data for given securities and fields between dates. Args: securities (list[str]): List of security identifiers (e.g., 'AAPL US Equity'). fields (list[str]): List of data fields to retrieve (e.g., 'PX_LAST'). start_date (date): Start date for the historical data. end_date (date): End date for the historical data. overrides (list[tuple], optional): List of tuples for field overrides. Defaults to None. options (dict, optional): Additional request options. Defaults to None. Returns: pl.DataFrame: A Polars DataFrame containing the requested historical data. Raises: ConnectionError: If there is an issue with the Bloomberg session. ValueError: If the request parameters are invalid. Example: Fetch historical closing prices for TLT: ```python from datetime import date from polars_bloomberg import BQuery with BQuery() as bq: df = bq.bdh( [\"TLT US Equity\"], [\"PX_LAST\"], start_date=date(2019, 1, 1), end_date=date(2019, 1, 7), ) print(df) ``` Expected output: ```python shape: (4, 3) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 security \u2506 date \u2506 PX_LAST \u2502 \u2502 --- \u2506 --- \u2506 --- \u2502 \u2502 str \u2506 date \u2506 f64 \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 TLT US Equity \u2506 2019-01-02 \u2506 122.15 \u2502 \u2502 TLT US Equity \u2506 2019-01-03 \u2506 123.54 \u2502 \u2502 TLT US Equity \u2506 2019-01-04 \u2506 122.11 \u2502 \u2502 TLT US Equity \u2506 2019-01-07 \u2506 121.75 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 ``` \"\"\" # noqa: E501 request = self . _create_request ( \"HistoricalDataRequest\" , securities , fields , overrides , options ) request . set ( \"startDate\" , start_date . strftime ( \"%Y%m %d \" )) request . set ( \"endDate\" , end_date . strftime ( \"%Y%m %d \" )) responses = self . _send_request ( request ) data = self . _parse_bdh_responses ( responses , fields ) return pl . DataFrame ( data ) bdp ( securities , fields , overrides = None , options = None ) Bloomberg Data Point, equivalent to Excel BDP() function. Fetch reference data for given securities and fields. Parameters: securities ( list [ str ] ) \u2013 List of security identifiers (e.g. 'AAPL US Equity'). fields ( list [ str ] ) \u2013 List of data fields to retrieve (e.g., 'PX_LAST'). overrides ( list [ tuple ] , default: None ) \u2013 List of tuples for field overrides. Defaults to None. options ( dict , default: None ) \u2013 Additional request options. Defaults to None. Returns: DataFrame \u2013 pl.DataFrame: A Polars DataFrame containing the requested reference data. Raises: ConnectionError \u2013 If there is an issue with the Bloomberg session. ValueError \u2013 If the request parameters are invalid. Example Fetch last price for Apple and Microsoft stocks: from polars_bloomberg import BQuery with BQuery() as bq: df = bq.bdp(['AAPL US Equity', 'MSFT US Equity'], ['PX_LAST']) print(df) Expected output: shape: (2, 2) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 security \u2506 PX_LAST \u2502 \u2502 --- \u2506 --- \u2502 \u2502 str \u2506 f64 \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 AAPL US Equity \u2506 171.32 \u2502 \u2502 MSFT US Equity \u2506 232.33 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Source code in polars_bloomberg\\plbbg.py 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 def bdp ( self , securities : list [ str ], fields : list [ str ], overrides : list [ tuple ] | None = None , options : dict | None = None , ) -> pl . DataFrame : \"\"\"Bloomberg Data Point, equivalent to Excel BDP() function. Fetch reference data for given securities and fields. Args: securities (list[str]): List of security identifiers (e.g. 'AAPL US Equity'). fields (list[str]): List of data fields to retrieve (e.g., 'PX_LAST'). overrides (list[tuple], optional): List of tuples for field overrides. Defaults to None. options (dict, optional): Additional request options. Defaults to None. Returns: pl.DataFrame: A Polars DataFrame containing the requested reference data. Raises: ConnectionError: If there is an issue with the Bloomberg session. ValueError: If the request parameters are invalid. Example: Fetch last price for Apple and Microsoft stocks: ```python from polars_bloomberg import BQuery with BQuery() as bq: df = bq.bdp(['AAPL US Equity', 'MSFT US Equity'], ['PX_LAST']) print(df) ``` Expected output: ```python shape: (2, 2) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 security \u2506 PX_LAST \u2502 \u2502 --- \u2506 --- \u2502 \u2502 str \u2506 f64 \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 AAPL US Equity \u2506 171.32 \u2502 \u2502 MSFT US Equity \u2506 232.33 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 ``` \"\"\" # noqa: E501 request = self . _create_request ( \"ReferenceDataRequest\" , securities , fields , overrides , options ) responses = self . _send_request ( request ) data = self . _parse_bdp_responses ( responses , fields ) return pl . DataFrame ( data ) bql ( expression ) Execute a Bloomberg Query Language (BQL) query. BQL is Bloomberg's domain-specific language for complex financial queries. It allows for advanced data retrieval, screening, and analysis. Parameters: expression ( str ) \u2013 The BQL query expression to execute. Can include functions like get(), let(), for(), filter(), etc. Returns: BqlResult ( BqlResult ) \u2013 An object containing: - List of Polars DataFrames (one for each item in BQL get statement) - Helper methods like combine() to merge DataFrames on common columns Raises: ConnectionError \u2013 If there is an issue with the Bloomberg session. ValueError \u2013 If the BQL query syntax is invalid. Example Simple query to fetch last price: from polars_bloomberg import BQuery with BQuery() as bq: # Get last price for multiple securities result = bq.bql(\"get(px_last) for(['IBM US Equity', 'MSFT US Equity'])\") df = result.combine() print(df) Expected output: shape: (2, 4) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 ID \u2506 PX_LAST \u2502 \u2502 --- \u2506 --- \u2502 \u2502 str \u2506 f64 \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 AAPL US Equity\u2506 150.25 \u2502 \u2502 MSFT US Equity\u2506 250.80 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Access individual DataFrames: >>> df_px_last = result[0] >>> print(df_px_last) shape: (2, 2) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 ID \u2506 PX_LAST \u2502 \u2502 --- \u2506 --- \u2502 \u2502 str \u2506 f64 \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 AAPL US Equity\u2506 150.25 \u2502 \u2502 MSFT US Equity\u2506 250.80 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Fetch multiple fields and combine results: >>> result = bq.bql(\"get(px_last, px_volume) for('AAPL US Equity')\") >>> df_combined = result.combine() >>> print(df_combined) shape: (1, 3) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 ID \u2506 PX_LAST \u2506 PX_VOLUME \u2502 \u2502 --- \u2506 --- \u2506 --- \u2502 \u2502 str \u2506 f64 \u2506 f64 \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 AAPL US Equity\u2506 150.25 \u2506 30000000.0 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Iterate over individual DataFrames: >>> for df in result: ... print(df) Source code in polars_bloomberg\\plbbg.py 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 def bql ( self , expression : str ) -> BqlResult : \"\"\"Execute a Bloomberg Query Language (BQL) query. BQL is Bloomberg's domain-specific language for complex financial queries. It allows for advanced data retrieval, screening, and analysis. Args: expression (str): The BQL query expression to execute. Can include functions like get(), let(), for(), filter(), etc. Returns: BqlResult: An object containing: - List of Polars DataFrames (one for each item in BQL get statement) - Helper methods like combine() to merge DataFrames on common columns Raises: ConnectionError: If there is an issue with the Bloomberg session. ValueError: If the BQL query syntax is invalid. Example: Simple query to fetch last price: ```python from polars_bloomberg import BQuery with BQuery() as bq: # Get last price for multiple securities result = bq.bql(\"get(px_last) for(['IBM US Equity', 'MSFT US Equity'])\") df = result.combine() print(df) ``` Expected output: ```python shape: (2, 4) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 ID \u2506 PX_LAST \u2502 \u2502 --- \u2506 --- \u2502 \u2502 str \u2506 f64 \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 AAPL US Equity\u2506 150.25 \u2502 \u2502 MSFT US Equity\u2506 250.80 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 ``` Access individual DataFrames: ```python >>> df_px_last = result[0] >>> print(df_px_last) shape: (2, 2) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 ID \u2506 PX_LAST \u2502 \u2502 --- \u2506 --- \u2502 \u2502 str \u2506 f64 \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 AAPL US Equity\u2506 150.25 \u2502 \u2502 MSFT US Equity\u2506 250.80 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 ``` Fetch multiple fields and combine results: ```python >>> result = bq.bql(\"get(px_last, px_volume) for('AAPL US Equity')\") >>> df_combined = result.combine() >>> print(df_combined) shape: (1, 3) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 ID \u2506 PX_LAST \u2506 PX_VOLUME \u2502 \u2502 --- \u2506 --- \u2506 --- \u2502 \u2502 str \u2506 f64 \u2506 f64 \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 AAPL US Equity\u2506 150.25 \u2506 30000000.0 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 ``` Iterate over individual DataFrames: ```python >>> for df in result: ... print(df) ``` \"\"\" # noqa: E501 request = self . _create_bql_request ( expression ) responses = self . _send_request ( request ) tables = self . _parse_bql_responses ( responses ) dataframes = [ pl . DataFrame ( table . data , schema = table . schema , strict = True ) for table in tables ] names = [ table . name for table in tables ] return BqlResult ( dataframes , names ) polars_bloomberg.BqlResult dataclass Holds the result of a BQL query as a list of Polars DataFrames. This class encapsulates the results of a Bloomberg Query Language (BQL) query, providing methods to access and manipulate the data. Attributes: dataframes ( list [ DataFrame ] ) \u2013 List of query result dataframes. names ( list [ str ] ) \u2013 List of data-item names corresponding to dataframes. Example Execute a BQL query and combine the results: from polars_bloomberg import BQuery with BQuery() as bq: result = bq.bql(\"get(px_last) for(['IBM US Equity', 'MSFT US Equity'])\") df = result.combine() print(df) Expected output: shape: (2, 4) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 ID \u2506 PX_LAST \u2502 \u2502 --- \u2506 --- \u2502 \u2502 str \u2506 f64 \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 IBM US Equity \u2506 125.34 \u2502 \u2502 MSFT US Equity\u2506 232.33 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Iterate over the list of DataFrames: for df in result: print(df) Access individual DataFrames by index: first_df = result[0] print(first_df) Get the number of DataFrames: num_dfs = len(result) print(f\"Number of DataFrames: {num_dfs}\") Methods: Name Description combine Combine all dataframes into one by joining on common columns. Source code in polars_bloomberg\\plbbg.pydataclass class BqlResult : \"\"\"Holds the result of a BQL query as a list of Polars DataFrames. This class encapsulates the results of a Bloomberg Query Language (BQL) query, providing methods to access and manipulate the data. Attributes: dataframes (list[pl.DataFrame]): List of query result dataframes. names (list[str]): List of data-item names corresponding to dataframes. Example: Execute a BQL query and combine the results: ```python from polars_bloomberg import BQuery with BQuery() as bq: result = bq.bql(\"get(px_last) for(['IBM US Equity', 'MSFT US Equity'])\") df = result.combine() print(df) ``` Expected output: ```python shape: (2, 4) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 ID \u2506 PX_LAST \u2502 \u2502 --- \u2506 --- \u2502 \u2502 str \u2506 f64 \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 IBM US Equity \u2506 125.34 \u2502 \u2502 MSFT US Equity\u2506 232.33 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 ``` Iterate over the list of DataFrames: ```python for df in result: print(df) ``` Access individual DataFrames by index: ```python first_df = result[0] print(first_df) ``` Get the number of DataFrames: ```python num_dfs = len(result) print(f\"Number of DataFrames: {num_dfs}\") ``` Methods: combine: Combine all dataframes into one by joining on common columns. \"\"\" dataframes : list [ pl . DataFrame ] names : list [ str ] def combine ( self ) -> pl . DataFrame : \"\"\"Combine all dataframes into one by joining on common columns. This method merges all the DataFrames in the `dataframes` attribute into a single DataFrame by performing a full join on the common columns. If no common columns are found, it raises a ValueError. Returns: pl.DataFrame: Combined dataframe joined on common columns. Raises: ValueError: If no common columns exist or no dataframes are present. Example: Combine results of a BQL query: ```python from polars_bloomberg import BQuery with BQuery() as bq: result = bq.bql(\"get(px_last, px_volume) for(['AAPL US Equity', 'MSFT US Equity'])\") df = result.combine() print(df) ``` Expected output: ```python shape: (2, 3) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 ID \u2506 PX_LAST \u2506 PX_VOLUME \u2502 \u2502 --- \u2506 --- \u2506 --- \u2502 \u2502 str \u2506 f64 \u2506 f64 \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 AAPL US Equity \u2506 150.25 \u2506 30000000.0 \u2502 \u2502 MSFT US Equity \u2506 250.80 \u2506 20000000.0 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 ``` Handle no common columns: ```python with BQuery() as bq: result = bq.bql(\"get(px_last) for(['AAPL US Equity'])\") try: df = result.combine() except ValueError as e: print(e) ``` Expected output: ``` No common columns found to join on. ``` \"\"\" # noqa: E501 if not self . dataframes : raise ValueError ( \"No DataFrames to combine.\" ) result = self . dataframes [ 0 ] # Initialize with the first DataFrame for df in self . dataframes [ 1 :]: common_cols = set ( result . columns ) & set ( df . columns ) if not common_cols : raise ValueError ( \"No common columns found to join on.\" ) result = result . join ( df , on = list ( common_cols ), how = \"full\" , coalesce = True ) return result def __getitem__ ( self , idx : int ) -> pl . DataFrame : \"\"\"Access individual DataFrames by index.\"\"\" return self . dataframes [ idx ] def __len__ ( self ) -> int : \"\"\"Return the number of dataframes.\"\"\" return len ( self . dataframes ) def __iter__ ( self ): \"\"\"Return an iterator over the dataframes.\"\"\" return iter ( self . dataframes ) __getitem__ ( idx ) Access individual DataFrames by index. Source code in polars_bloomberg\\plbbg.py 189 190 191 def __getitem__ ( self , idx : int ) -> pl . DataFrame : \"\"\"Access individual DataFrames by index.\"\"\" return self . dataframes [ idx ] __iter__ () Return an iterator over the dataframes. Source code in polars_bloomberg\\plbbg.py 197 198 199 def __iter__ ( self ): \"\"\"Return an iterator over the dataframes.\"\"\" return iter ( self . dataframes ) __len__ () Return the number of dataframes. Source code in polars_bloomberg\\plbbg.py 193 194 195 def __len__ ( self ) -> int : \"\"\"Return the number of dataframes.\"\"\" return len ( self . dataframes ) combine () Combine all dataframes into one by joining on common columns. This method merges all the DataFrames in the dataframes attribute into a single DataFrame by performing a full join on the common columns. If no common columns are found, it raises a ValueError. Returns: DataFrame \u2013 pl.DataFrame: Combined dataframe joined on common columns. Raises: ValueError \u2013 If no common columns exist or no dataframes are present. Example Combine results of a BQL query: from polars_bloomberg import BQuery with BQuery() as bq: result = bq.bql(\"get(px_last, px_volume) for(['AAPL US Equity', 'MSFT US Equity'])\") df = result.combine() print(df) Expected output: shape: (2, 3) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 ID \u2506 PX_LAST \u2506 PX_VOLUME \u2502 \u2502 --- \u2506 --- \u2506 --- \u2502 \u2502 str \u2506 f64 \u2506 f64 \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 AAPL US Equity \u2506 150.25 \u2506 30000000.0 \u2502 \u2502 MSFT US Equity \u2506 250.80 \u2506 20000000.0 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Handle no common columns: with BQuery() as bq: result = bq.bql(\"get(px_last) for(['AAPL US Equity'])\") try: df = result.combine() except ValueError as e: print(e) Expected output: No common columns found to join on. Source code in polars_bloomberg\\plbbg.py 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 def combine ( self ) -> pl . DataFrame : \"\"\"Combine all dataframes into one by joining on common columns. This method merges all the DataFrames in the `dataframes` attribute into a single DataFrame by performing a full join on the common columns. If no common columns are found, it raises a ValueError. Returns: pl.DataFrame: Combined dataframe joined on common columns. Raises: ValueError: If no common columns exist or no dataframes are present. Example: Combine results of a BQL query: ```python from polars_bloomberg import BQuery with BQuery() as bq: result = bq.bql(\"get(px_last, px_volume) for(['AAPL US Equity', 'MSFT US Equity'])\") df = result.combine() print(df) ``` Expected output: ```python shape: (2, 3) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 ID \u2506 PX_LAST \u2506 PX_VOLUME \u2502 \u2502 --- \u2506 --- \u2506 --- \u2502 \u2502 str \u2506 f64 \u2506 f64 \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 AAPL US Equity \u2506 150.25 \u2506 30000000.0 \u2502 \u2502 MSFT US Equity \u2506 250.80 \u2506 20000000.0 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 ``` Handle no common columns: ```python with BQuery() as bq: result = bq.bql(\"get(px_last) for(['AAPL US Equity'])\") try: df = result.combine() except ValueError as e: print(e) ``` Expected output: ``` No common columns found to join on. ``` \"\"\" # noqa: E501 if not self . dataframes : raise ValueError ( \"No DataFrames to combine.\" ) result = self . dataframes [ 0 ] # Initialize with the first DataFrame for df in self . dataframes [ 1 :]: common_cols = set ( result . columns ) & set ( df . columns ) if not common_cols : raise ValueError ( \"No common columns found to join on.\" ) result = result . join ( df , on = list ( common_cols ), how = \"full\" , coalesce = True ) return result","title":"API Reference"},{"location":"api/#api-reference","text":"","title":"API Reference"},{"location":"api/#polars_bloomberg.BQuery","text":"Provides methods to query Bloomberg API and return data as Polars DataFrames. Example Create a BQuery instance and fetch last price for Apple stock: from polars_bloomberg import BQuery with BQuery() as bq: df = bq.bdp(['AAPL US Equity'], ['PX_LAST']) print(df) Expected output: shape: (1, 2) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 security \u2506 PX_LAST \u2502 \u2502 --- \u2506 --- \u2502 \u2502 str \u2506 f64 \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 AAPL US Equity \u2506 171.32 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Source code in polars_bloomberg\\plbbg.pyclass BQuery : \"\"\"Provides methods to query Bloomberg API and return data as Polars DataFrames. Example: Create a BQuery instance and fetch last price for Apple stock: ```python from polars_bloomberg import BQuery with BQuery() as bq: df = bq.bdp(['AAPL US Equity'], ['PX_LAST']) print(df) ``` Expected output: ```python shape: (1, 2) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 security \u2506 PX_LAST \u2502 \u2502 --- \u2506 --- \u2502 \u2502 str \u2506 f64 \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 AAPL US Equity \u2506 171.32 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 ``` \"\"\" def __init__ ( self , host : str = \"localhost\" , port : int = 8194 , timeout : int = 32_000 , debug : bool = False , ) -> None : \"\"\"Initialize a BQuery instance with connection parameters. Args: host (str, optional): The hostname for the Bloomberg API server. Defaults to \"localhost\". port (int, optional): The port number for the Bloomberg API server. Defaults to 8194. timeout (int, optional): Timeout in milliseconds for API requests. Defaults to 32000. debug (bool, optional): Enable debug logging/saving of intermediate results. Defaults to False. Raises: ConnectionError: If unable to establish connection to Bloomberg API. \"\"\" self . host = host self . port = port self . timeout = timeout self . session = None self . debug = debug def __enter__ ( self ): # noqa: D105 # Enter the runtime context related to this object. options = blpapi . SessionOptions () options . setServerHost ( self . host ) options . setServerPort ( self . port ) self . session = blpapi . Session ( options ) if not self . session . start (): raise ConnectionError ( \"Failed to start Bloomberg session.\" ) # Open both required services if not self . session . openService ( \"//blp/refdata\" ): raise ConnectionError ( \"Failed to open service //blp/refdata.\" ) if not self . session . openService ( \"//blp/bqlsvc\" ): raise ConnectionError ( \"Failed to open service //blp/bqlsvc.\" ) return self def __exit__ ( self , exc_type , exc_val , exc_tb ): # noqa: D105 # Exit the context manager and stop the Bloomberg session. if self . session : self . session . stop () def bdp ( self , securities : list [ str ], fields : list [ str ], overrides : list [ tuple ] | None = None , options : dict | None = None , ) -> pl . DataFrame : \"\"\"Bloomberg Data Point, equivalent to Excel BDP() function. Fetch reference data for given securities and fields. Args: securities (list[str]): List of security identifiers (e.g. 'AAPL US Equity'). fields (list[str]): List of data fields to retrieve (e.g., 'PX_LAST'). overrides (list[tuple], optional): List of tuples for field overrides. Defaults to None. options (dict, optional): Additional request options. Defaults to None. Returns: pl.DataFrame: A Polars DataFrame containing the requested reference data. Raises: ConnectionError: If there is an issue with the Bloomberg session. ValueError: If the request parameters are invalid. Example: Fetch last price for Apple and Microsoft stocks: ```python from polars_bloomberg import BQuery with BQuery() as bq: df = bq.bdp(['AAPL US Equity', 'MSFT US Equity'], ['PX_LAST']) print(df) ``` Expected output: ```python shape: (2, 2) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 security \u2506 PX_LAST \u2502 \u2502 --- \u2506 --- \u2502 \u2502 str \u2506 f64 \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 AAPL US Equity \u2506 171.32 \u2502 \u2502 MSFT US Equity \u2506 232.33 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 ``` \"\"\" # noqa: E501 request = self . _create_request ( \"ReferenceDataRequest\" , securities , fields , overrides , options ) responses = self . _send_request ( request ) data = self . _parse_bdp_responses ( responses , fields ) return pl . DataFrame ( data ) def bdh ( self , securities : list [ str ], fields : list [ str ], start_date : date , end_date : date , overrides : list [ tuple ] | None = None , options : dict | None = None , ) -> pl . DataFrame : \"\"\"Bloomberg Data History, equivalent to Excel BDH() function. Fetch historical data for given securities and fields between dates. Args: securities (list[str]): List of security identifiers (e.g., 'AAPL US Equity'). fields (list[str]): List of data fields to retrieve (e.g., 'PX_LAST'). start_date (date): Start date for the historical data. end_date (date): End date for the historical data. overrides (list[tuple], optional): List of tuples for field overrides. Defaults to None. options (dict, optional): Additional request options. Defaults to None. Returns: pl.DataFrame: A Polars DataFrame containing the requested historical data. Raises: ConnectionError: If there is an issue with the Bloomberg session. ValueError: If the request parameters are invalid. Example: Fetch historical closing prices for TLT: ```python from datetime import date from polars_bloomberg import BQuery with BQuery() as bq: df = bq.bdh( [\"TLT US Equity\"], [\"PX_LAST\"], start_date=date(2019, 1, 1), end_date=date(2019, 1, 7), ) print(df) ``` Expected output: ```python shape: (4, 3) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 security \u2506 date \u2506 PX_LAST \u2502 \u2502 --- \u2506 --- \u2506 --- \u2502 \u2502 str \u2506 date \u2506 f64 \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 TLT US Equity \u2506 2019-01-02 \u2506 122.15 \u2502 \u2502 TLT US Equity \u2506 2019-01-03 \u2506 123.54 \u2502 \u2502 TLT US Equity \u2506 2019-01-04 \u2506 122.11 \u2502 \u2502 TLT US Equity \u2506 2019-01-07 \u2506 121.75 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 ``` \"\"\" # noqa: E501 request = self . _create_request ( \"HistoricalDataRequest\" , securities , fields , overrides , options ) request . set ( \"startDate\" , start_date . strftime ( \"%Y%m %d \" )) request . set ( \"endDate\" , end_date . strftime ( \"%Y%m %d \" )) responses = self . _send_request ( request ) data = self . _parse_bdh_responses ( responses , fields ) return pl . DataFrame ( data ) def bql ( self , expression : str ) -> BqlResult : \"\"\"Execute a Bloomberg Query Language (BQL) query. BQL is Bloomberg's domain-specific language for complex financial queries. It allows for advanced data retrieval, screening, and analysis. Args: expression (str): The BQL query expression to execute. Can include functions like get(), let(), for(), filter(), etc. Returns: BqlResult: An object containing: - List of Polars DataFrames (one for each item in BQL get statement) - Helper methods like combine() to merge DataFrames on common columns Raises: ConnectionError: If there is an issue with the Bloomberg session. ValueError: If the BQL query syntax is invalid. Example: Simple query to fetch last price: ```python from polars_bloomberg import BQuery with BQuery() as bq: # Get last price for multiple securities result = bq.bql(\"get(px_last) for(['IBM US Equity', 'MSFT US Equity'])\") df = result.combine() print(df) ``` Expected output: ```python shape: (2, 4) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 ID \u2506 PX_LAST \u2502 \u2502 --- \u2506 --- \u2502 \u2502 str \u2506 f64 \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 AAPL US Equity\u2506 150.25 \u2502 \u2502 MSFT US Equity\u2506 250.80 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 ``` Access individual DataFrames: ```python >>> df_px_last = result[0] >>> print(df_px_last) shape: (2, 2) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 ID \u2506 PX_LAST \u2502 \u2502 --- \u2506 --- \u2502 \u2502 str \u2506 f64 \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 AAPL US Equity\u2506 150.25 \u2502 \u2502 MSFT US Equity\u2506 250.80 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 ``` Fetch multiple fields and combine results: ```python >>> result = bq.bql(\"get(px_last, px_volume) for('AAPL US Equity')\") >>> df_combined = result.combine() >>> print(df_combined) shape: (1, 3) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 ID \u2506 PX_LAST \u2506 PX_VOLUME \u2502 \u2502 --- \u2506 --- \u2506 --- \u2502 \u2502 str \u2506 f64 \u2506 f64 \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 AAPL US Equity\u2506 150.25 \u2506 30000000.0 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 ``` Iterate over individual DataFrames: ```python >>> for df in result: ... print(df) ``` \"\"\" # noqa: E501 request = self . _create_bql_request ( expression ) responses = self . _send_request ( request ) tables = self . _parse_bql_responses ( responses ) dataframes = [ pl . DataFrame ( table . data , schema = table . schema , strict = True ) for table in tables ] names = [ table . name for table in tables ] return BqlResult ( dataframes , names ) def _create_request ( self , request_type : str , securities : list [ str ], fields : list [ str ], overrides : Sequence | None = None , options : dict | None = None , ) -> blpapi . Request : \"\"\"Create a Bloomberg request with support for overrides and options.\"\"\" service = self . session . getService ( \"//blp/refdata\" ) request = service . createRequest ( request_type ) # Add securities securities_element = request . getElement ( \"securities\" ) for security in securities : securities_element . appendValue ( security ) # Add fields fields_element = request . getElement ( \"fields\" ) for field in fields : fields_element . appendValue ( field ) # Add overrides if provided if overrides : overrides_element = request . getElement ( \"overrides\" ) for field_id , value in overrides : override_element = overrides_element . appendElement () override_element . setElement ( \"fieldId\" , field_id ) override_element . setElement ( \"value\" , value ) # Add additional options if provided if options : for key , value in options . items (): request . set ( key , value ) return request def _create_bql_request ( self , expression : str ) -> blpapi . Request : \"\"\"Create a BQL request.\"\"\" service = self . session . getService ( \"//blp/bqlsvc\" ) request = service . createRequest ( \"sendQuery\" ) request . set ( \"expression\" , expression ) return request def _send_request ( self , request ) -> list [ dict ]: \"\"\"Send a Bloomberg request and collect responses with timeout handling.\"\"\" self . session . sendRequest ( request ) responses = [] while True : # Wait for an event with the specified timeout event = self . session . nextEvent ( self . timeout ) if event . eventType () == blpapi . Event . TIMEOUT : # Handle the timeout scenario raise TimeoutError ( f \"Request timed out after { self . timeout } milliseconds\" ) for msg in event : # Check for errors in the message if msg . hasElement ( \"responseError\" ): error = msg . getElement ( \"responseError\" ) error_message = error . getElementAsString ( \"message\" ) raise Exception ( f \"Response error: { error_message } \" ) responses . append ( msg . toPy ()) # Break the loop when the final response is received if event . eventType () == blpapi . Event . RESPONSE : break return responses def _parse_bdp_responses ( self , responses : list [ dict ], fields : list [ str ] ) -> list [ dict ]: data = [] for response in responses : security_data = response . get ( \"securityData\" , []) for sec in security_data : security = sec . get ( \"security\" ) field_data = sec . get ( \"fieldData\" , {}) record = { \"security\" : security } for field in fields : record [ field ] = field_data . get ( field ) data . append ( record ) return data def _parse_bdh_responses ( self , responses : list [ dict ], fields : list [ str ] ) -> list [ dict ]: data = [] for response in responses : security_data = response . get ( \"securityData\" , {}) security = security_data . get ( \"security\" ) field_data_array = security_data . get ( \"fieldData\" , []) for entry in field_data_array : record = { \"security\" : security , \"date\" : entry . get ( \"date\" )} for field in fields : record [ field ] = entry . get ( field ) data . append ( record ) return data def _parse_bql_responses ( self , responses : list [ Any ]): \"\"\"Parse BQL responses into a list of SITable objects.\"\"\" tables : list [ SITable ] = [] results : list [ dict ] = self . _extract_results ( responses ) for result in results : tables . extend ( self . _parse_result ( result )) return [ self . _apply_schema ( table ) for table in tables ] def _apply_schema ( self , table : SITable ) -> SITable : \"\"\"Convert data based on the schema (e.g., str -> date, 'NaN' -> None).\"\"\" date_format = \"%Y-%m- %d T%H:%M:%SZ\" for col , dtype in table . schema . items (): if dtype == pl . Date : table . data [ col ] = [ ( datetime . strptime ( v , date_format ) . date () if isinstance ( v , str ) else None ) for v in table . data [ col ] ] elif dtype in { pl . Float64 , pl . Int64 }: table . data [ col ] = [ None if x == \"NaN\" else x for x in table . data [ col ]] return table def _extract_results ( self , responses : list [ Any ]) -> list [ dict ]: \"\"\"Extract the 'results' section from each response, handling JSON strings.\"\"\" extracted = [] for response in responses : resp_dict = response if isinstance ( response , str ): try : resp_dict = json . loads ( response . replace ( \"'\" , '\"' )) except json . JSONDecodeError as e : logger . error ( \"Failed to decode JSON: %s . Error: %s \" , response , e ) continue results = resp_dict . get ( \"results\" ) if results : extracted . append ( results ) return extracted def _parse_result ( self , results : dict [ str , Any ]) -> list [ SITable ]: \"\"\"Convert a single BQL results dictionary into a list[SITable].\"\"\" tables : list [ SITable ] = [] for field , content in results . items (): data = {} schema_str = {} data [ \"ID\" ] = content . get ( \"idColumn\" , {}) . get ( \"values\" , []) data [ field ] = content . get ( \"valuesColumn\" , {}) . get ( \"values\" , []) schema_str [ \"ID\" ] = content . get ( \"idColumn\" , {}) . get ( \"type\" , \"STRING\" ) schema_str [ field ] = content . get ( \"valuesColumn\" , {}) . get ( \"type\" , \"STRING\" ) # Process secondary columns for sec_col in content . get ( \"secondaryColumns\" , []): name = sec_col . get ( \"name\" , \"\" ) data [ name ] = sec_col . get ( \"values\" , []) schema_str [ name ] = sec_col . get ( \"type\" , str ) schema = self . _map_types ( schema_str ) tables . append ( SITable ( name = field , data = data , schema = schema )) # If debug mode is on, save the input and output for reproducibility if self . debug : self . _save_debug_case ( results , tables ) return tables def _map_types ( self , type_map : dict [ str , str ]) -> dict [ str , pl . DataType ]: \"\"\"Map string-based types to Polars data types. Default to Utf8.\"\"\" mapping = { \"STRING\" : pl . Utf8 , \"DOUBLE\" : pl . Float64 , \"INT\" : pl . Int64 , \"DATE\" : pl . Date , \"BOOLEAN\" : pl . Boolean , } return { col : mapping . get ( t . upper (), pl . Utf8 ) for col , t in type_map . items ()} def _save_debug_case ( self , in_results : dict , tables : list [ SITable ]): \"\"\"Save input and output to a JSON file for debugging and test generation.\"\"\" # Create a directory for debug cases if it doesn't exist os . makedirs ( \"debug_cases\" , exist_ok = True ) # Create a unique filename with timestamp timestamp = datetime . now () . strftime ( \"%Y%m %d _%H%M%S\" ) filename = f \"debug_cases/bql_parse_results_ { timestamp } .json\" # Prepare serializable data out_tables = [] for t in tables : out_tables . append ( { \"name\" : t . name , \"data\" : t . data , \"schema\" : { col : str ( dtype ) for col , dtype in t . schema . items ()}, } ) to_save = { \"in_results\" : in_results , \"out_tables\" : out_tables } with open ( filename , \"w\" , encoding = \"utf-8\" ) as f : json . dump ( to_save , f , indent = 2 ) logger . debug ( \"Saved debug case to %s \" , filename )","title":"BQuery"},{"location":"api/#polars_bloomberg.BQuery.__init__","text":"Initialize a BQuery instance with connection parameters. Parameters: host ( str , default: 'localhost' ) \u2013 The hostname for the Bloomberg API server. Defaults to \"localhost\". port ( int , default: 8194 ) \u2013 The port number for the Bloomberg API server. Defaults to 8194. timeout ( int , default: 32000 ) \u2013 Timeout in milliseconds for API requests. Defaults to 32000. debug ( bool , default: False ) \u2013 Enable debug logging/saving of intermediate results. Defaults to False. Raises: ConnectionError \u2013 If unable to establish connection to Bloomberg API. Source code in polars_bloomberg\\plbbg.py 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 def __init__ ( self , host : str = \"localhost\" , port : int = 8194 , timeout : int = 32_000 , debug : bool = False , ) -> None : \"\"\"Initialize a BQuery instance with connection parameters. Args: host (str, optional): The hostname for the Bloomberg API server. Defaults to \"localhost\". port (int, optional): The port number for the Bloomberg API server. Defaults to 8194. timeout (int, optional): Timeout in milliseconds for API requests. Defaults to 32000. debug (bool, optional): Enable debug logging/saving of intermediate results. Defaults to False. Raises: ConnectionError: If unable to establish connection to Bloomberg API. \"\"\" self . host = host self . port = port self . timeout = timeout self . session = None self . debug = debug","title":"__init__"},{"location":"api/#polars_bloomberg.BQuery.bdh","text":"Bloomberg Data History, equivalent to Excel BDH() function. Fetch historical data for given securities and fields between dates. Parameters: securities ( list [ str ] ) \u2013 List of security identifiers (e.g., 'AAPL US Equity'). fields ( list [ str ] ) \u2013 List of data fields to retrieve (e.g., 'PX_LAST'). start_date ( date ) \u2013 Start date for the historical data. end_date ( date ) \u2013 End date for the historical data. overrides ( list [ tuple ] , default: None ) \u2013 List of tuples for field overrides. Defaults to None. options ( dict , default: None ) \u2013 Additional request options. Defaults to None. Returns: DataFrame \u2013 pl.DataFrame: A Polars DataFrame containing the requested historical data. Raises: ConnectionError \u2013 If there is an issue with the Bloomberg session. ValueError \u2013 If the request parameters are invalid. Example Fetch historical closing prices for TLT: from datetime import date from polars_bloomberg import BQuery with BQuery() as bq: df = bq.bdh( [\"TLT US Equity\"], [\"PX_LAST\"], start_date=date(2019, 1, 1), end_date=date(2019, 1, 7), ) print(df) Expected output: shape: (4, 3) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 security \u2506 date \u2506 PX_LAST \u2502 \u2502 --- \u2506 --- \u2506 --- \u2502 \u2502 str \u2506 date \u2506 f64 \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 TLT US Equity \u2506 2019-01-02 \u2506 122.15 \u2502 \u2502 TLT US Equity \u2506 2019-01-03 \u2506 123.54 \u2502 \u2502 TLT US Equity \u2506 2019-01-04 \u2506 122.11 \u2502 \u2502 TLT US Equity \u2506 2019-01-07 \u2506 121.75 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Source code in polars_bloomberg\\plbbg.py 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 def bdh ( self , securities : list [ str ], fields : list [ str ], start_date : date , end_date : date , overrides : list [ tuple ] | None = None , options : dict | None = None , ) -> pl . DataFrame : \"\"\"Bloomberg Data History, equivalent to Excel BDH() function. Fetch historical data for given securities and fields between dates. Args: securities (list[str]): List of security identifiers (e.g., 'AAPL US Equity'). fields (list[str]): List of data fields to retrieve (e.g., 'PX_LAST'). start_date (date): Start date for the historical data. end_date (date): End date for the historical data. overrides (list[tuple], optional): List of tuples for field overrides. Defaults to None. options (dict, optional): Additional request options. Defaults to None. Returns: pl.DataFrame: A Polars DataFrame containing the requested historical data. Raises: ConnectionError: If there is an issue with the Bloomberg session. ValueError: If the request parameters are invalid. Example: Fetch historical closing prices for TLT: ```python from datetime import date from polars_bloomberg import BQuery with BQuery() as bq: df = bq.bdh( [\"TLT US Equity\"], [\"PX_LAST\"], start_date=date(2019, 1, 1), end_date=date(2019, 1, 7), ) print(df) ``` Expected output: ```python shape: (4, 3) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 security \u2506 date \u2506 PX_LAST \u2502 \u2502 --- \u2506 --- \u2506 --- \u2502 \u2502 str \u2506 date \u2506 f64 \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 TLT US Equity \u2506 2019-01-02 \u2506 122.15 \u2502 \u2502 TLT US Equity \u2506 2019-01-03 \u2506 123.54 \u2502 \u2502 TLT US Equity \u2506 2019-01-04 \u2506 122.11 \u2502 \u2502 TLT US Equity \u2506 2019-01-07 \u2506 121.75 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 ``` \"\"\" # noqa: E501 request = self . _create_request ( \"HistoricalDataRequest\" , securities , fields , overrides , options ) request . set ( \"startDate\" , start_date . strftime ( \"%Y%m %d \" )) request . set ( \"endDate\" , end_date . strftime ( \"%Y%m %d \" )) responses = self . _send_request ( request ) data = self . _parse_bdh_responses ( responses , fields ) return pl . DataFrame ( data )","title":"bdh"},{"location":"api/#polars_bloomberg.BQuery.bdp","text":"Bloomberg Data Point, equivalent to Excel BDP() function. Fetch reference data for given securities and fields. Parameters: securities ( list [ str ] ) \u2013 List of security identifiers (e.g. 'AAPL US Equity'). fields ( list [ str ] ) \u2013 List of data fields to retrieve (e.g., 'PX_LAST'). overrides ( list [ tuple ] , default: None ) \u2013 List of tuples for field overrides. Defaults to None. options ( dict , default: None ) \u2013 Additional request options. Defaults to None. Returns: DataFrame \u2013 pl.DataFrame: A Polars DataFrame containing the requested reference data. Raises: ConnectionError \u2013 If there is an issue with the Bloomberg session. ValueError \u2013 If the request parameters are invalid. Example Fetch last price for Apple and Microsoft stocks: from polars_bloomberg import BQuery with BQuery() as bq: df = bq.bdp(['AAPL US Equity', 'MSFT US Equity'], ['PX_LAST']) print(df) Expected output: shape: (2, 2) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 security \u2506 PX_LAST \u2502 \u2502 --- \u2506 --- \u2502 \u2502 str \u2506 f64 \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 AAPL US Equity \u2506 171.32 \u2502 \u2502 MSFT US Equity \u2506 232.33 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Source code in polars_bloomberg\\plbbg.py 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 def bdp ( self , securities : list [ str ], fields : list [ str ], overrides : list [ tuple ] | None = None , options : dict | None = None , ) -> pl . DataFrame : \"\"\"Bloomberg Data Point, equivalent to Excel BDP() function. Fetch reference data for given securities and fields. Args: securities (list[str]): List of security identifiers (e.g. 'AAPL US Equity'). fields (list[str]): List of data fields to retrieve (e.g., 'PX_LAST'). overrides (list[tuple], optional): List of tuples for field overrides. Defaults to None. options (dict, optional): Additional request options. Defaults to None. Returns: pl.DataFrame: A Polars DataFrame containing the requested reference data. Raises: ConnectionError: If there is an issue with the Bloomberg session. ValueError: If the request parameters are invalid. Example: Fetch last price for Apple and Microsoft stocks: ```python from polars_bloomberg import BQuery with BQuery() as bq: df = bq.bdp(['AAPL US Equity', 'MSFT US Equity'], ['PX_LAST']) print(df) ``` Expected output: ```python shape: (2, 2) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 security \u2506 PX_LAST \u2502 \u2502 --- \u2506 --- \u2502 \u2502 str \u2506 f64 \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 AAPL US Equity \u2506 171.32 \u2502 \u2502 MSFT US Equity \u2506 232.33 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 ``` \"\"\" # noqa: E501 request = self . _create_request ( \"ReferenceDataRequest\" , securities , fields , overrides , options ) responses = self . _send_request ( request ) data = self . _parse_bdp_responses ( responses , fields ) return pl . DataFrame ( data )","title":"bdp"},{"location":"api/#polars_bloomberg.BQuery.bql","text":"Execute a Bloomberg Query Language (BQL) query. BQL is Bloomberg's domain-specific language for complex financial queries. It allows for advanced data retrieval, screening, and analysis. Parameters: expression ( str ) \u2013 The BQL query expression to execute. Can include functions like get(), let(), for(), filter(), etc. Returns: BqlResult ( BqlResult ) \u2013 An object containing: - List of Polars DataFrames (one for each item in BQL get statement) - Helper methods like combine() to merge DataFrames on common columns Raises: ConnectionError \u2013 If there is an issue with the Bloomberg session. ValueError \u2013 If the BQL query syntax is invalid. Example Simple query to fetch last price: from polars_bloomberg import BQuery with BQuery() as bq: # Get last price for multiple securities result = bq.bql(\"get(px_last) for(['IBM US Equity', 'MSFT US Equity'])\") df = result.combine() print(df) Expected output: shape: (2, 4) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 ID \u2506 PX_LAST \u2502 \u2502 --- \u2506 --- \u2502 \u2502 str \u2506 f64 \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 AAPL US Equity\u2506 150.25 \u2502 \u2502 MSFT US Equity\u2506 250.80 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Access individual DataFrames: >>> df_px_last = result[0] >>> print(df_px_last) shape: (2, 2) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 ID \u2506 PX_LAST \u2502 \u2502 --- \u2506 --- \u2502 \u2502 str \u2506 f64 \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 AAPL US Equity\u2506 150.25 \u2502 \u2502 MSFT US Equity\u2506 250.80 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Fetch multiple fields and combine results: >>> result = bq.bql(\"get(px_last, px_volume) for('AAPL US Equity')\") >>> df_combined = result.combine() >>> print(df_combined) shape: (1, 3) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 ID \u2506 PX_LAST \u2506 PX_VOLUME \u2502 \u2502 --- \u2506 --- \u2506 --- \u2502 \u2502 str \u2506 f64 \u2506 f64 \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 AAPL US Equity\u2506 150.25 \u2506 30000000.0 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Iterate over individual DataFrames: >>> for df in result: ... print(df) Source code in polars_bloomberg\\plbbg.py 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 def bql ( self , expression : str ) -> BqlResult : \"\"\"Execute a Bloomberg Query Language (BQL) query. BQL is Bloomberg's domain-specific language for complex financial queries. It allows for advanced data retrieval, screening, and analysis. Args: expression (str): The BQL query expression to execute. Can include functions like get(), let(), for(), filter(), etc. Returns: BqlResult: An object containing: - List of Polars DataFrames (one for each item in BQL get statement) - Helper methods like combine() to merge DataFrames on common columns Raises: ConnectionError: If there is an issue with the Bloomberg session. ValueError: If the BQL query syntax is invalid. Example: Simple query to fetch last price: ```python from polars_bloomberg import BQuery with BQuery() as bq: # Get last price for multiple securities result = bq.bql(\"get(px_last) for(['IBM US Equity', 'MSFT US Equity'])\") df = result.combine() print(df) ``` Expected output: ```python shape: (2, 4) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 ID \u2506 PX_LAST \u2502 \u2502 --- \u2506 --- \u2502 \u2502 str \u2506 f64 \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 AAPL US Equity\u2506 150.25 \u2502 \u2502 MSFT US Equity\u2506 250.80 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 ``` Access individual DataFrames: ```python >>> df_px_last = result[0] >>> print(df_px_last) shape: (2, 2) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 ID \u2506 PX_LAST \u2502 \u2502 --- \u2506 --- \u2502 \u2502 str \u2506 f64 \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 AAPL US Equity\u2506 150.25 \u2502 \u2502 MSFT US Equity\u2506 250.80 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 ``` Fetch multiple fields and combine results: ```python >>> result = bq.bql(\"get(px_last, px_volume) for('AAPL US Equity')\") >>> df_combined = result.combine() >>> print(df_combined) shape: (1, 3) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 ID \u2506 PX_LAST \u2506 PX_VOLUME \u2502 \u2502 --- \u2506 --- \u2506 --- \u2502 \u2502 str \u2506 f64 \u2506 f64 \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 AAPL US Equity\u2506 150.25 \u2506 30000000.0 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 ``` Iterate over individual DataFrames: ```python >>> for df in result: ... print(df) ``` \"\"\" # noqa: E501 request = self . _create_bql_request ( expression ) responses = self . _send_request ( request ) tables = self . _parse_bql_responses ( responses ) dataframes = [ pl . DataFrame ( table . data , schema = table . schema , strict = True ) for table in tables ] names = [ table . name for table in tables ] return BqlResult ( dataframes , names )","title":"bql"},{"location":"api/#polars_bloomberg.BqlResult","text":"Holds the result of a BQL query as a list of Polars DataFrames. This class encapsulates the results of a Bloomberg Query Language (BQL) query, providing methods to access and manipulate the data. Attributes: dataframes ( list [ DataFrame ] ) \u2013 List of query result dataframes. names ( list [ str ] ) \u2013 List of data-item names corresponding to dataframes. Example Execute a BQL query and combine the results: from polars_bloomberg import BQuery with BQuery() as bq: result = bq.bql(\"get(px_last) for(['IBM US Equity', 'MSFT US Equity'])\") df = result.combine() print(df) Expected output: shape: (2, 4) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 ID \u2506 PX_LAST \u2502 \u2502 --- \u2506 --- \u2502 \u2502 str \u2506 f64 \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 IBM US Equity \u2506 125.34 \u2502 \u2502 MSFT US Equity\u2506 232.33 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Iterate over the list of DataFrames: for df in result: print(df) Access individual DataFrames by index: first_df = result[0] print(first_df) Get the number of DataFrames: num_dfs = len(result) print(f\"Number of DataFrames: {num_dfs}\") Methods: Name Description combine Combine all dataframes into one by joining on common columns. Source code in polars_bloomberg\\plbbg.pydataclass class BqlResult : \"\"\"Holds the result of a BQL query as a list of Polars DataFrames. This class encapsulates the results of a Bloomberg Query Language (BQL) query, providing methods to access and manipulate the data. Attributes: dataframes (list[pl.DataFrame]): List of query result dataframes. names (list[str]): List of data-item names corresponding to dataframes. Example: Execute a BQL query and combine the results: ```python from polars_bloomberg import BQuery with BQuery() as bq: result = bq.bql(\"get(px_last) for(['IBM US Equity', 'MSFT US Equity'])\") df = result.combine() print(df) ``` Expected output: ```python shape: (2, 4) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 ID \u2506 PX_LAST \u2502 \u2502 --- \u2506 --- \u2502 \u2502 str \u2506 f64 \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 IBM US Equity \u2506 125.34 \u2502 \u2502 MSFT US Equity\u2506 232.33 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 ``` Iterate over the list of DataFrames: ```python for df in result: print(df) ``` Access individual DataFrames by index: ```python first_df = result[0] print(first_df) ``` Get the number of DataFrames: ```python num_dfs = len(result) print(f\"Number of DataFrames: {num_dfs}\") ``` Methods: combine: Combine all dataframes into one by joining on common columns. \"\"\" dataframes : list [ pl . DataFrame ] names : list [ str ] def combine ( self ) -> pl . DataFrame : \"\"\"Combine all dataframes into one by joining on common columns. This method merges all the DataFrames in the `dataframes` attribute into a single DataFrame by performing a full join on the common columns. If no common columns are found, it raises a ValueError. Returns: pl.DataFrame: Combined dataframe joined on common columns. Raises: ValueError: If no common columns exist or no dataframes are present. Example: Combine results of a BQL query: ```python from polars_bloomberg import BQuery with BQuery() as bq: result = bq.bql(\"get(px_last, px_volume) for(['AAPL US Equity', 'MSFT US Equity'])\") df = result.combine() print(df) ``` Expected output: ```python shape: (2, 3) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 ID \u2506 PX_LAST \u2506 PX_VOLUME \u2502 \u2502 --- \u2506 --- \u2506 --- \u2502 \u2502 str \u2506 f64 \u2506 f64 \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 AAPL US Equity \u2506 150.25 \u2506 30000000.0 \u2502 \u2502 MSFT US Equity \u2506 250.80 \u2506 20000000.0 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 ``` Handle no common columns: ```python with BQuery() as bq: result = bq.bql(\"get(px_last) for(['AAPL US Equity'])\") try: df = result.combine() except ValueError as e: print(e) ``` Expected output: ``` No common columns found to join on. ``` \"\"\" # noqa: E501 if not self . dataframes : raise ValueError ( \"No DataFrames to combine.\" ) result = self . dataframes [ 0 ] # Initialize with the first DataFrame for df in self . dataframes [ 1 :]: common_cols = set ( result . columns ) & set ( df . columns ) if not common_cols : raise ValueError ( \"No common columns found to join on.\" ) result = result . join ( df , on = list ( common_cols ), how = \"full\" , coalesce = True ) return result def __getitem__ ( self , idx : int ) -> pl . DataFrame : \"\"\"Access individual DataFrames by index.\"\"\" return self . dataframes [ idx ] def __len__ ( self ) -> int : \"\"\"Return the number of dataframes.\"\"\" return len ( self . dataframes ) def __iter__ ( self ): \"\"\"Return an iterator over the dataframes.\"\"\" return iter ( self . dataframes )","title":"BqlResult"},{"location":"api/#polars_bloomberg.BqlResult.__getitem__","text":"Access individual DataFrames by index. Source code in polars_bloomberg\\plbbg.py 189 190 191 def __getitem__ ( self , idx : int ) -> pl . DataFrame : \"\"\"Access individual DataFrames by index.\"\"\" return self . dataframes [ idx ]","title":"__getitem__"},{"location":"api/#polars_bloomberg.BqlResult.__iter__","text":"Return an iterator over the dataframes. Source code in polars_bloomberg\\plbbg.py 197 198 199 def __iter__ ( self ): \"\"\"Return an iterator over the dataframes.\"\"\" return iter ( self . dataframes )","title":"__iter__"},{"location":"api/#polars_bloomberg.BqlResult.__len__","text":"Return the number of dataframes. Source code in polars_bloomberg\\plbbg.py 193 194 195 def __len__ ( self ) -> int : \"\"\"Return the number of dataframes.\"\"\" return len ( self . dataframes )","title":"__len__"},{"location":"api/#polars_bloomberg.BqlResult.combine","text":"Combine all dataframes into one by joining on common columns. This method merges all the DataFrames in the dataframes attribute into a single DataFrame by performing a full join on the common columns. If no common columns are found, it raises a ValueError. Returns: DataFrame \u2013 pl.DataFrame: Combined dataframe joined on common columns. Raises: ValueError \u2013 If no common columns exist or no dataframes are present. Example Combine results of a BQL query: from polars_bloomberg import BQuery with BQuery() as bq: result = bq.bql(\"get(px_last, px_volume) for(['AAPL US Equity', 'MSFT US Equity'])\") df = result.combine() print(df) Expected output: shape: (2, 3) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 ID \u2506 PX_LAST \u2506 PX_VOLUME \u2502 \u2502 --- \u2506 --- \u2506 --- \u2502 \u2502 str \u2506 f64 \u2506 f64 \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 AAPL US Equity \u2506 150.25 \u2506 30000000.0 \u2502 \u2502 MSFT US Equity \u2506 250.80 \u2506 20000000.0 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Handle no common columns: with BQuery() as bq: result = bq.bql(\"get(px_last) for(['AAPL US Equity'])\") try: df = result.combine() except ValueError as e: print(e) Expected output: No common columns found to join on. Source code in polars_bloomberg\\plbbg.py 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 def combine ( self ) -> pl . DataFrame : \"\"\"Combine all dataframes into one by joining on common columns. This method merges all the DataFrames in the `dataframes` attribute into a single DataFrame by performing a full join on the common columns. If no common columns are found, it raises a ValueError. Returns: pl.DataFrame: Combined dataframe joined on common columns. Raises: ValueError: If no common columns exist or no dataframes are present. Example: Combine results of a BQL query: ```python from polars_bloomberg import BQuery with BQuery() as bq: result = bq.bql(\"get(px_last, px_volume) for(['AAPL US Equity', 'MSFT US Equity'])\") df = result.combine() print(df) ``` Expected output: ```python shape: (2, 3) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 ID \u2506 PX_LAST \u2506 PX_VOLUME \u2502 \u2502 --- \u2506 --- \u2506 --- \u2502 \u2502 str \u2506 f64 \u2506 f64 \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 AAPL US Equity \u2506 150.25 \u2506 30000000.0 \u2502 \u2502 MSFT US Equity \u2506 250.80 \u2506 20000000.0 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 ``` Handle no common columns: ```python with BQuery() as bq: result = bq.bql(\"get(px_last) for(['AAPL US Equity'])\") try: df = result.combine() except ValueError as e: print(e) ``` Expected output: ``` No common columns found to join on. ``` \"\"\" # noqa: E501 if not self . dataframes : raise ValueError ( \"No DataFrames to combine.\" ) result = self . dataframes [ 0 ] # Initialize with the first DataFrame for df in self . dataframes [ 1 :]: common_cols = set ( result . columns ) & set ( df . columns ) if not common_cols : raise ValueError ( \"No common columns found to join on.\" ) result = result . join ( df , on = list ( common_cols ), how = \"full\" , coalesce = True ) return result","title":"combine"}]}